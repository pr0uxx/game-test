(()=>{"use strict";var t={466:(t,e)=>{e.m0=void 0;Math.PI;e.m0=function(t,e,i,r){void 0===r&&(r={});for(var a=function(t){return{amplitude:"number"==typeof t.amplitude?t.amplitude:1,frequency:"number"==typeof t.frequency?t.frequency:1,octaves:"number"==typeof t.octaves?Math.floor(t.octaves):1,persistence:"number"==typeof t.persistence?t.persistence:.5}}(r),n=a.amplitude,s=a.frequency,o=a.octaves,h=a.persistence,l=new Array(t),d=0;d<t;d++){l[d]=new Array(e);for(var c=0;c<e;c++){for(var g=0,u=0;u<o;u++){var f=s*Math.pow(2,u);g+=i(d*f,c*f)*(n*Math.pow(h,u))}l[d][c]=g/(2-1/Math.pow(2,o-1))}}return l}},713:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.makeNoise2D=void 0;var r=i(685),a=(Math.sqrt(3)-1)/2,n=(1/Math.sqrt(3)-1)/2;function s(t,e,i){return{dx:-e-t*a,dy:-i-t*a,xsb:e,ysb:i}}e.makeNoise2D=function(t){for(var e=[],i=0;i<d.length;i+=4){for(var c=o[d[i]],g=null,u=null,f=0;f<c.length;f+=3)u=s(c[f],c[f+1],c[f+2]),null===g?e[i/4]=u:g.next=u,g=u;u.next=s(d[i+1],d[i+2],d[i+3])}var p=[];for(i=0;i<l.length;i+=2)p[l[i]]=e[l[i+1]];var v=new Uint8Array(256),m=new Uint8Array(256),_=new Uint8Array(256);for(i=0;i<256;i++)_[i]=i;var y=new Uint32Array(1);for(y[0]=t,y=r.default(r.default(r.default(y))),i=255;i>=0;i--){y=r.default(y);var x=new Uint32Array(1);x[0]=(y[0]+31)%(i+1),x[0]<0&&(x[0]+=i+1),v[i]=_[x[0]],m[i]=14&v[i],_[x[0]]=_[i]}return function(t,e){for(var i=(t+e)*n,r=t+i,s=e+i,o=Math.floor(r),l=Math.floor(s),d=(o+l)*a,c=t-(o+d),g=e-(l+d),u=r-o,f=s-l,_=u+f,y=0,x=p[u-f+1|_<<1|_+f<<2|_+u<<4];void 0!==x;x=x.next){var b=c+x.dx,w=g+x.dy,S=2-b*b-w*w;if(S>0){var C=o+x.xsb,P=l+x.ysb,k=v[255&C],T=m[k+P&255];y+=S*S*S*S*(h[T]*b+h[T+1]*w)}}return.02127659574468085*y}};var o=[[1,1,0,1,0,1,0,0,0],[1,1,0,1,0,1,2,1,1]],h=[5,2,2,5,-5,2,-2,5,5,-2,2,-5,-5,-2,-2,-5],l=[0,1,1,0,4,1,17,0,20,2,21,2,22,5,23,5,26,4,39,3,42,4,43,3],d=[0,0,1,-1,0,0,-1,1,0,2,1,1,1,2,2,0,1,2,0,2,1,0,0,0]},438:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.makeNoise3D=void 0;var r=i(685),a=(Math.sqrt(4)-1)/3,n=(1/Math.sqrt(4)-1)/3;function s(t,e,i,r){return{dx:-e-t*a,dy:-i-t*a,dz:-r-t*a,xsb:e,ysb:i,zsb:r}}e.makeNoise3D=function(t){for(var e=[],i=0;i<d.length;i+=9){for(var c=o[d[i]],g=null,u=null,f=0;f<c.length;f+=4)u=s(c[f],c[f+1],c[f+2],c[f+3]),null===g?e[i/9]=u:g.next=u,g=u;u.next=s(d[i+1],d[i+2],d[i+3],d[i+4]),u.next.next=s(d[i+5],d[i+6],d[i+7],d[i+8])}var p=[];for(i=0;i<l.length;i+=2)p[l[i]]=e[l[i+1]];var v=new Uint8Array(256),m=new Uint8Array(256),_=new Uint8Array(256);for(i=0;i<256;i++)_[i]=i;var y=new Uint32Array(1);for(y[0]=t,y=r.default(r.default(r.default(y))),i=255;i>=0;i--){y=r.default(y);var x=new Uint32Array(1);x[0]=(y[0]+31)%(i+1),x[0]<0&&(x[0]+=i+1),v[i]=_[x[0]],m[i]=v[i]%24*3,_[x[0]]=_[i]}return function(t,e,i){for(var r=(t+e+i)*n,s=t+r,o=e+r,l=i+r,d=Math.floor(s),c=Math.floor(o),g=Math.floor(l),u=(d+c+g)*a,f=t-(d+u),_=e-(c+u),y=i-(g+u),x=s-d,b=o-c,w=l-g,S=x+b+w,C=0,P=p[b-w+1|x-b+1<<1|x-w+1<<2|S<<3|S+w<<5|S+b<<7|S+x<<9];void 0!==P;P=P.next){var k=f+P.dx,T=_+P.dy,A=y+P.dz,M=2-k*k-T*T-A*A;if(M>0){var G=d+P.xsb,L=c+P.ysb,E=g+P.zsb,R=v[255&G],D=v[R+L&255],O=m[D+E&255];C+=M*M*M*M*(h[O]*k+h[O+1]*T+h[O+2]*A)}}return.009708737864077669*C}};var o=[[0,0,0,0,1,1,0,0,1,0,1,0,1,0,0,1],[2,1,1,0,2,1,0,1,2,0,1,1,3,1,1,1],[1,1,0,0,1,0,1,0,1,0,0,1,2,1,1,0,2,1,0,1,2,0,1,1]],h=[-11,4,4,-4,11,4,-4,4,11,11,4,4,4,11,4,4,4,11,-11,-4,4,-4,-11,4,-4,-4,11,11,-4,4,4,-11,4,4,-4,11,-11,4,-4,-4,11,-4,-4,4,-11,11,4,-4,4,11,-4,4,4,-11,-11,-4,-4,-4,-11,-4,-4,-4,-11,11,-4,-4,4,-11,-4,4,-4,-11],l=[0,2,1,1,2,2,5,1,6,0,7,0,32,2,34,2,129,1,133,1,160,5,161,5,518,0,519,0,546,4,550,4,645,3,647,3,672,5,673,5,674,4,677,3,678,4,679,3,680,13,681,13,682,12,685,14,686,12,687,14,712,20,714,18,809,21,813,23,840,20,841,21,1198,19,1199,22,1226,18,1230,19,1325,23,1327,22,1352,15,1353,17,1354,15,1357,17,1358,16,1359,16,1360,11,1361,10,1362,11,1365,10,1366,9,1367,9,1392,11,1394,11,1489,10,1493,10,1520,8,1521,8,1878,9,1879,9,1906,7,1910,7,2005,6,2007,6,2032,8,2033,8,2034,7,2037,6,2038,7,2039,6],d=[0,0,1,-1,0,0,1,0,-1,0,0,-1,1,0,0,0,1,-1,0,0,-1,0,1,0,0,-1,1,0,2,1,1,0,1,1,1,-1,0,2,1,0,1,1,1,-1,1,0,2,0,1,1,1,-1,1,1,1,3,2,1,0,3,1,2,0,1,3,2,0,1,3,1,0,2,1,3,0,2,1,3,0,1,2,1,1,1,0,0,2,2,0,0,1,1,0,1,0,2,0,2,0,1,1,0,0,1,2,0,0,2,2,0,0,0,0,1,1,-1,1,2,0,0,0,0,1,-1,1,1,2,0,0,0,0,1,1,1,-1,2,3,1,1,1,2,0,0,2,2,3,1,1,1,2,2,0,0,2,3,1,1,1,2,0,2,0,2,1,1,-1,1,2,0,0,2,2,1,1,-1,1,2,2,0,0,2,1,-1,1,1,2,0,0,2,2,1,-1,1,1,2,0,2,0,2,1,1,1,-1,2,2,0,0,2,1,1,1,-1,2,0,2,0]},663:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.makeNoise4D=void 0;var r=i(685),a=(Math.sqrt(5)-1)/4,n=(1/Math.sqrt(5)-1)/4;function s(t,e,i,r,n){return{dx:-e-t*a,dy:-i-t*a,dz:-r-t*a,dw:-n-t*a,xsb:e,ysb:i,zsb:r,wsb:n}}e.makeNoise4D=function(t){for(var e=[],i=0;i<d.length;i+=16){for(var c=o[d[i]],g=null,u=null,f=0;f<c.length;f+=5)u=s(c[f],c[f+1],c[f+2],c[f+3],c[f+4]),null===g?e[i/16]=u:g.next=u,g=u;u.next=s(d[i+1],d[i+2],d[i+3],d[i+4],d[i+5]),u.next.next=s(d[i+6],d[i+7],d[i+8],d[i+9],d[i+10]),u.next.next.next=s(d[i+11],d[i+12],d[i+13],d[i+14],d[i+15])}var p=[];for(i=0;i<l.length;i+=2)p[l[i]]=e[l[i+1]];var v=new Uint8Array(256),m=new Uint8Array(256),_=new Uint8Array(256);for(i=0;i<256;i++)_[i]=i;var y=new Uint32Array(1);for(y[0]=t,y=r.default(r.default(r.default(y))),i=255;i>=0;i--){y=r.default(y);var x=new Uint32Array(1);x[0]=(y[0]+31)%(i+1),x[0]<0&&(x[0]+=i+1),v[i]=_[x[0]],m[i]=252&v[i],_[x[0]]=_[i]}return function(t,e,i,r){for(var s=(t+e+i+r)*n,o=t+s,l=e+s,d=i+s,c=r+s,g=Math.floor(o),u=Math.floor(l),f=Math.floor(d),_=Math.floor(c),y=(g+u+f+_)*a,x=t-(g+y),b=e-(u+y),w=i-(f+y),S=r-(_+y),C=o-g,P=l-u,k=d-f,T=c-_,A=C+P+k+T,M=0,G=p[k-T+1|P-k+1<<1|P-T+1<<2|C-P+1<<3|C-k+1<<4|C-T+1<<5|A<<6|A+T<<8|A+k<<11|A+P<<14|A+C<<17];void 0!==G;G=G.next){var L=x+G.dx,E=b+G.dy,R=w+G.dz,D=S+G.dw,O=2-L*L-E*E-R*R-D*D;if(O>0){var I=g+G.xsb,F=u+G.ysb,N=f+G.zsb,B=_+G.wsb,W=v[255&I],H=v[W+F&255],z=v[H+N&255],q=m[z+B&255];M+=O*O*O*O*(h[q]*L+h[q+1]*E+h[q+2]*R+h[q+3]*D)}}return.03333333333333333*M}};var o=[[0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1],[3,1,1,1,0,3,1,1,0,1,3,1,0,1,1,3,0,1,1,1,4,1,1,1,1],[1,1,0,0,0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1,2,1,1,0,0,2,1,0,1,0,2,1,0,0,1,2,0,1,1,0,2,0,1,0,1,2,0,0,1,1],[3,1,1,1,0,3,1,1,0,1,3,1,0,1,1,3,0,1,1,1,2,1,1,0,0,2,1,0,1,0,2,1,0,0,1,2,0,1,1,0,2,0,1,0,1,2,0,0,1,1]],h=[3,1,1,1,1,3,1,1,1,1,3,1,1,1,1,3,-3,1,1,1,-1,3,1,1,-1,1,3,1,-1,1,1,3,3,-1,1,1,1,-3,1,1,1,-1,3,1,1,-1,1,3,-3,-1,1,1,-1,-3,1,1,-1,-1,3,1,-1,-1,1,3,3,1,-1,1,1,3,-1,1,1,1,-3,1,1,1,-1,3,-3,1,-1,1,-1,3,-1,1,-1,1,-3,1,-1,1,-1,3,3,-1,-1,1,1,-3,-1,1,1,-1,-3,1,1,-1,-1,3,-3,-1,-1,1,-1,-3,-1,1,-1,-1,-3,1,-1,-1,-1,3,3,1,1,-1,1,3,1,-1,1,1,3,-1,1,1,1,-3,-3,1,1,-1,-1,3,1,-1,-1,1,3,-1,-1,1,1,-3,3,-1,1,-1,1,-3,1,-1,1,-1,3,-1,1,-1,1,-3,-3,-1,1,-1,-1,-3,1,-1,-1,-1,3,-1,-1,-1,1,-3,3,1,-1,-1,1,3,-1,-1,1,1,-3,-1,1,1,-1,-3,-3,1,-1,-1,-1,3,-1,-1,-1,1,-3,-1,-1,1,-1,-3,3,-1,-1,-1,1,-3,-1,-1,1,-1,-3,-1,1,-1,-1,-3,-3,-1,-1,-1,-1,-3,-1,-1,-1,-1,-3,-1,-1,-1,-1,-3],l=[0,3,1,2,2,3,5,2,6,1,7,1,8,3,9,2,10,3,13,2,16,3,18,3,22,1,23,1,24,3,26,3,33,2,37,2,38,1,39,1,41,2,45,2,54,1,55,1,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,256,3,258,3,264,3,266,3,272,3,274,3,280,3,282,3,2049,2,2053,2,2057,2,2061,2,2081,2,2085,2,2089,2,2093,2,2304,9,2305,9,2312,9,2313,9,16390,1,16391,1,16406,1,16407,1,16422,1,16423,1,16438,1,16439,1,16642,8,16646,8,16658,8,16662,8,18437,6,18439,6,18469,6,18471,6,18688,9,18689,9,18690,8,18693,6,18694,8,18695,6,18696,9,18697,9,18706,8,18710,8,18725,6,18727,6,131128,0,131129,0,131130,0,131131,0,131132,0,131133,0,131134,0,131135,0,131352,7,131354,7,131384,7,131386,7,133161,5,133165,5,133177,5,133181,5,133376,9,133377,9,133384,9,133385,9,133400,7,133402,7,133417,5,133421,5,133432,7,133433,5,133434,7,133437,5,147510,4,147511,4,147518,4,147519,4,147714,8,147718,8,147730,8,147734,8,147736,7,147738,7,147766,4,147767,4,147768,7,147770,7,147774,4,147775,4,149509,6,149511,6,149541,6,149543,6,149545,5,149549,5,149558,4,149559,4,149561,5,149565,5,149566,4,149567,4,149760,9,149761,9,149762,8,149765,6,149766,8,149767,6,149768,9,149769,9,149778,8,149782,8,149784,7,149786,7,149797,6,149799,6,149801,5,149805,5,149814,4,149815,4,149816,7,149817,5,149818,7,149821,5,149822,4,149823,4,149824,37,149825,37,149826,36,149829,34,149830,36,149831,34,149832,37,149833,37,149842,36,149846,36,149848,35,149850,35,149861,34,149863,34,149865,33,149869,33,149878,32,149879,32,149880,35,149881,33,149882,35,149885,33,149886,32,149887,32,150080,49,150082,48,150088,49,150098,48,150104,47,150106,47,151873,46,151877,45,151881,46,151909,45,151913,44,151917,44,152128,49,152129,46,152136,49,152137,46,166214,43,166215,42,166230,43,166247,42,166262,41,166263,41,166466,48,166470,43,166482,48,166486,43,168261,45,168263,42,168293,45,168295,42,168512,31,168513,28,168514,31,168517,28,168518,25,168519,25,280952,40,280953,39,280954,40,280957,39,280958,38,280959,38,281176,47,281178,47,281208,40,281210,40,282985,44,282989,44,283001,39,283005,39,283208,30,283209,27,283224,30,283241,27,283256,22,283257,22,297334,41,297335,41,297342,38,297343,38,297554,29,297558,24,297562,29,297590,24,297594,21,297598,21,299365,26,299367,23,299373,26,299383,23,299389,20,299391,20,299584,31,299585,28,299586,31,299589,28,299590,25,299591,25,299592,30,299593,27,299602,29,299606,24,299608,30,299610,29,299621,26,299623,23,299625,27,299629,26,299638,24,299639,23,299640,22,299641,22,299642,21,299645,20,299646,21,299647,20,299648,61,299649,60,299650,61,299653,60,299654,59,299655,59,299656,58,299657,57,299666,55,299670,54,299672,58,299674,55,299685,52,299687,51,299689,57,299693,52,299702,54,299703,51,299704,56,299705,56,299706,53,299709,50,299710,53,299711,50,299904,61,299906,61,299912,58,299922,55,299928,58,299930,55,301697,60,301701,60,301705,57,301733,52,301737,57,301741,52,301952,79,301953,79,301960,76,301961,76,316038,59,316039,59,316054,54,316071,51,316086,54,316087,51,316290,78,316294,78,316306,73,316310,73,318085,77,318087,77,318117,70,318119,70,318336,79,318337,79,318338,78,318341,77,318342,78,318343,77,430776,56,430777,56,430778,53,430781,50,430782,53,430783,50,431e3,75,431002,72,431032,75,431034,72,432809,74,432813,69,432825,74,432829,69,433032,76,433033,76,433048,75,433065,74,433080,75,433081,74,447158,71,447159,68,447166,71,447167,68,447378,73,447382,73,447386,72,447414,71,447418,72,447422,71,449189,70,449191,70,449197,69,449207,68,449213,69,449215,68,449408,67,449409,67,449410,66,449413,64,449414,66,449415,64,449416,67,449417,67,449426,66,449430,66,449432,65,449434,65,449445,64,449447,64,449449,63,449453,63,449462,62,449463,62,449464,65,449465,63,449466,65,449469,63,449470,62,449471,62,449472,19,449473,19,449474,18,449477,16,449478,18,449479,16,449480,19,449481,19,449490,18,449494,18,449496,17,449498,17,449509,16,449511,16,449513,15,449517,15,449526,14,449527,14,449528,17,449529,15,449530,17,449533,15,449534,14,449535,14,449728,19,449729,19,449730,18,449734,18,449736,19,449737,19,449746,18,449750,18,449752,17,449754,17,449784,17,449786,17,451520,19,451521,19,451525,16,451527,16,451528,19,451529,19,451557,16,451559,16,451561,15,451565,15,451577,15,451581,15,451776,19,451777,19,451784,19,451785,19,465858,18,465861,16,465862,18,465863,16,465874,18,465878,18,465893,16,465895,16,465910,14,465911,14,465918,14,465919,14,466114,18,466118,18,466130,18,466134,18,467909,16,467911,16,467941,16,467943,16,468160,13,468161,13,468162,13,468163,13,468164,13,468165,13,468166,13,468167,13,580568,17,580570,17,580585,15,580589,15,580598,14,580599,14,580600,17,580601,15,580602,17,580605,15,580606,14,580607,14,580824,17,580826,17,580856,17,580858,17,582633,15,582637,15,582649,15,582653,15,582856,12,582857,12,582872,12,582873,12,582888,12,582889,12,582904,12,582905,12,596982,14,596983,14,596990,14,596991,14,597202,11,597206,11,597210,11,597214,11,597234,11,597238,11,597242,11,597246,11,599013,10,599015,10,599021,10,599023,10,599029,10,599031,10,599037,10,599039,10,599232,13,599233,13,599234,13,599235,13,599236,13,599237,13,599238,13,599239,13,599240,12,599241,12,599250,11,599254,11,599256,12,599257,12,599258,11,599262,11,599269,10,599271,10,599272,12,599273,12,599277,10,599279,10,599282,11,599285,10,599286,11,599287,10,599288,12,599289,12,599290,11,599293,10,599294,11,599295,10],d=[0,0,1,-1,0,0,0,1,0,-1,0,0,1,0,0,-1,0,0,-1,1,0,0,0,0,1,-1,0,0,0,1,0,-1,0,0,-1,0,1,0,0,0,-1,1,0,0,0,0,1,-1,0,0,-1,0,0,1,0,0,-1,0,1,0,0,0,-1,1,0,2,1,1,0,0,1,1,1,-1,0,1,1,1,0,-1,0,2,1,0,1,0,1,1,-1,1,0,1,1,0,1,-1,0,2,0,1,1,0,1,-1,1,1,0,1,0,1,1,-1,0,2,1,0,0,1,1,1,-1,0,1,1,1,0,-1,1,0,2,0,1,0,1,1,-1,1,0,1,1,0,1,-1,1,0,2,0,0,1,1,1,-1,0,1,1,1,0,-1,1,1,1,4,2,1,1,0,4,1,2,1,0,4,1,1,2,0,1,4,2,1,0,1,4,1,2,0,1,4,1,1,0,2,1,4,2,0,1,1,4,1,0,2,1,4,1,0,1,2,1,4,0,2,1,1,4,0,1,2,1,4,0,1,1,2,1,2,1,1,0,0,3,2,1,0,0,3,1,2,0,0,1,2,1,0,1,0,3,2,0,1,0,3,1,0,2,0,1,2,0,1,1,0,3,0,2,1,0,3,0,1,2,0,1,2,1,0,0,1,3,2,0,0,1,3,1,0,0,2,1,2,0,1,0,1,3,0,2,0,1,3,0,1,0,2,1,2,0,0,1,1,3,0,0,2,1,3,0,0,1,2,2,3,1,1,1,0,2,1,1,1,-1,2,2,0,0,0,2,3,1,1,0,1,2,1,1,-1,1,2,2,0,0,0,2,3,1,0,1,1,2,1,-1,1,1,2,2,0,0,0,2,3,1,1,1,0,2,1,1,1,-1,2,0,2,0,0,2,3,1,1,0,1,2,1,1,-1,1,2,0,2,0,0,2,3,0,1,1,1,2,-1,1,1,1,2,0,2,0,0,2,3,1,1,1,0,2,1,1,1,-1,2,0,0,2,0,2,3,1,0,1,1,2,1,-1,1,1,2,0,0,2,0,2,3,0,1,1,1,2,-1,1,1,1,2,0,0,2,0,2,3,1,1,0,1,2,1,1,-1,1,2,0,0,0,2,2,3,1,0,1,1,2,1,-1,1,1,2,0,0,0,2,2,3,0,1,1,1,2,-1,1,1,1,2,0,0,0,2,2,1,1,1,-1,0,1,1,1,0,-1,0,0,0,0,0,2,1,1,-1,1,0,1,1,0,1,-1,0,0,0,0,0,2,1,-1,1,1,0,1,0,1,1,-1,0,0,0,0,0,2,1,1,-1,0,1,1,1,0,-1,1,0,0,0,0,0,2,1,-1,1,0,1,1,0,1,-1,1,0,0,0,0,0,2,1,-1,0,1,1,1,0,-1,1,1,0,0,0,0,0,2,1,1,1,-1,0,1,1,1,0,-1,2,2,0,0,0,2,1,1,-1,1,0,1,1,0,1,-1,2,2,0,0,0,2,1,1,-1,0,1,1,1,0,-1,1,2,2,0,0,0,2,1,1,1,-1,0,1,1,1,0,-1,2,0,2,0,0,2,1,-1,1,1,0,1,0,1,1,-1,2,0,2,0,0,2,1,-1,1,0,1,1,0,1,-1,1,2,0,2,0,0,2,1,1,-1,1,0,1,1,0,1,-1,2,0,0,2,0,2,1,-1,1,1,0,1,0,1,1,-1,2,0,0,2,0,2,1,-1,0,1,1,1,0,-1,1,1,2,0,0,2,0,2,1,1,-1,0,1,1,1,0,-1,1,2,0,0,0,2,2,1,-1,1,0,1,1,0,1,-1,1,2,0,0,0,2,2,1,-1,0,1,1,1,0,-1,1,1,2,0,0,0,2,3,1,1,0,0,0,2,2,0,0,0,2,1,1,1,-1,3,1,0,1,0,0,2,0,2,0,0,2,1,1,1,-1,3,1,0,0,1,0,2,0,0,2,0,2,1,1,1,-1,3,1,1,0,0,0,2,2,0,0,0,2,1,1,-1,1,3,1,0,1,0,0,2,0,2,0,0,2,1,1,-1,1,3,1,0,0,0,1,2,0,0,0,2,2,1,1,-1,1,3,1,1,0,0,0,2,2,0,0,0,2,1,-1,1,1,3,1,0,0,1,0,2,0,0,2,0,2,1,-1,1,1,3,1,0,0,0,1,2,0,0,0,2,2,1,-1,1,1,3,1,0,1,0,0,2,0,2,0,0,2,-1,1,1,1,3,1,0,0,1,0,2,0,0,2,0,2,-1,1,1,1,3,1,0,0,0,1,2,0,0,0,2,2,-1,1,1,1,3,3,2,1,0,0,3,1,2,0,0,4,1,1,1,1,3,3,2,0,1,0,3,1,0,2,0,4,1,1,1,1,3,3,0,2,1,0,3,0,1,2,0,4,1,1,1,1,3,3,2,0,0,1,3,1,0,0,2,4,1,1,1,1,3,3,0,2,0,1,3,0,1,0,2,4,1,1,1,1,3,3,0,0,2,1,3,0,0,1,2,4,1,1,1,1,3,3,2,1,0,0,3,1,2,0,0,2,1,1,1,-1,3,3,2,0,1,0,3,1,0,2,0,2,1,1,1,-1,3,3,0,2,1,0,3,0,1,2,0,2,1,1,1,-1,3,3,2,1,0,0,3,1,2,0,0,2,1,1,-1,1,3,3,2,0,0,1,3,1,0,0,2,2,1,1,-1,1,3,3,0,2,0,1,3,0,1,0,2,2,1,1,-1,1,3,3,2,0,1,0,3,1,0,2,0,2,1,-1,1,1,3,3,2,0,0,1,3,1,0,0,2,2,1,-1,1,1,3,3,0,0,2,1,3,0,0,1,2,2,1,-1,1,1,3,3,0,2,1,0,3,0,1,2,0,2,-1,1,1,1,3,3,0,2,0,1,3,0,1,0,2,2,-1,1,1,1,3,3,0,0,2,1,3,0,0,1,2,2,-1,1,1,1]},234:(t,e,i)=>{e.DA=void 0;var r=i(713);Object.defineProperty(e,"DA",{enumerable:!0,get:function(){return r.makeNoise2D}});i(438),i(663)},685:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(t){var e=new Uint32Array(1);return e[0]=1664525*t[0]+1013904223,e}}},e={};function i(r){var a=e[r];if(void 0!==a)return a.exports;var n=e[r]={exports:{}};return t[r](n,n.exports,i),n.exports}(()=>{class t{static log=[];static DebugToConsole=!0;static logError(t){this.logMessage(r.Error,t)}static logInfo(t){this.logMessage(r.Info,t)}static logDebug(t){this.logMessage(r.Debug,t)}static logWarning(t){this.logMessage(r.Warning,t)}static logException(t){console.exception(t)}static logMessage(i,a){if(t.DebugToConsole)switch(i){case r.Debug:console.debug(a);case r.Info:console.info(a);break;case r.Warning:console.warn(a);break;case r.Error:console.error(a)}const n=new e(i,a);t.log?t.log.push(n):t.log=[n]}}class e{constructor(t,e){this.severity=t,this.message=e,this.date=new Date}message;date;severity}var r;!function(t){t[t.Debug=0]="Debug",t[t.Info=1]="Info",t[t.Warning=2]="Warning",t[t.Error=3]="Error"}(r||(r={}));class a{static getRandomInt(t,e){return t=Math.ceil(t),e=Math.floor(e),Math.floor(Math.random()*(e-t)+t)}}class n{static player;static currentLevel;static levels;static givePlayer(t){const e=this.player.inventory.items.find((e=>e.name===t.name));e?e.name+=t.count:this.player.inventory.items.push(t)}}var s=i(466),o=Math.PI/180;const h="undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{},l={_global:h,version:"8.0.2",isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/param/.test(function(t){}.toString()),dblClickWindow:400,getAngle:t=>l.angleDeg?t*o:t,enableTrace:!1,pointerEventsEnabled:!0,autoDrawEnabled:!0,hitOnDragEnabled:!1,capturePointerEventsEnabled:!1,_mouseListenClick:!1,_touchListenClick:!1,_pointerListenClick:!1,_mouseInDblClickWindow:!1,_touchInDblClickWindow:!1,_pointerInDblClickWindow:!1,pixelRatio:"undefined"!=typeof window&&window.devicePixelRatio||1,dragDistance:3,angleDeg:!0,showWarnings:!0,dragButtons:[0,1],isDragging:()=>l.DD.isDragging,isDragReady:()=>!!l.DD.node,document:h.document,_injectGlobal(t){h.Konva=t}},d=t=>{l[t.prototype.getClassName()]=t};l._injectGlobal(l);class c{constructor(t=[1,0,0,1,0,0]){this.dirty=!1,this.m=t&&t.slice()||[1,0,0,1,0,0]}reset(){this.m[0]=1,this.m[1]=0,this.m[2]=0,this.m[3]=1,this.m[4]=0,this.m[5]=0}copy(){return new c(this.m)}copyInto(t){t.m[0]=this.m[0],t.m[1]=this.m[1],t.m[2]=this.m[2],t.m[3]=this.m[3],t.m[4]=this.m[4],t.m[5]=this.m[5]}point(t){var e=this.m;return{x:e[0]*t.x+e[2]*t.y+e[4],y:e[1]*t.x+e[3]*t.y+e[5]}}translate(t,e){return this.m[4]+=this.m[0]*t+this.m[2]*e,this.m[5]+=this.m[1]*t+this.m[3]*e,this}scale(t,e){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=e,this.m[3]*=e,this}rotate(t){var e=Math.cos(t),i=Math.sin(t),r=this.m[0]*e+this.m[2]*i,a=this.m[1]*e+this.m[3]*i,n=this.m[0]*-i+this.m[2]*e,s=this.m[1]*-i+this.m[3]*e;return this.m[0]=r,this.m[1]=a,this.m[2]=n,this.m[3]=s,this}getTranslation(){return{x:this.m[4],y:this.m[5]}}skew(t,e){var i=this.m[0]+this.m[2]*e,r=this.m[1]+this.m[3]*e,a=this.m[2]+this.m[0]*t,n=this.m[3]+this.m[1]*t;return this.m[0]=i,this.m[1]=r,this.m[2]=a,this.m[3]=n,this}multiply(t){var e=this.m[0]*t.m[0]+this.m[2]*t.m[1],i=this.m[1]*t.m[0]+this.m[3]*t.m[1],r=this.m[0]*t.m[2]+this.m[2]*t.m[3],a=this.m[1]*t.m[2]+this.m[3]*t.m[3],n=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],s=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=e,this.m[1]=i,this.m[2]=r,this.m[3]=a,this.m[4]=n,this.m[5]=s,this}invert(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),e=this.m[3]*t,i=-this.m[1]*t,r=-this.m[2]*t,a=this.m[0]*t,n=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),s=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=e,this.m[1]=i,this.m[2]=r,this.m[3]=a,this.m[4]=n,this.m[5]=s,this}getMatrix(){return this.m}setAbsolutePosition(t,e){var i=this.m[0],r=this.m[1],a=this.m[2],n=this.m[3],s=this.m[4],o=(i*(e-this.m[5])-r*(t-s))/(i*n-r*a),h=(t-s-a*o)/i;return this.translate(h,o)}decompose(){var t=this.m[0],e=this.m[1],i=this.m[2],r=this.m[3],a=t*r-e*i;let n={x:this.m[4],y:this.m[5],rotation:0,scaleX:0,scaleY:0,skewX:0,skewY:0};if(0!=t||0!=e){var s=Math.sqrt(t*t+e*e);n.rotation=e>0?Math.acos(t/s):-Math.acos(t/s),n.scaleX=s,n.scaleY=a/s,n.skewX=(t*i+e*r)/a,n.skewY=0}else if(0!=i||0!=r){var o=Math.sqrt(i*i+r*r);n.rotation=Math.PI/2-(r>0?Math.acos(-i/o):-Math.acos(i/o)),n.scaleX=a/o,n.scaleY=o,n.skewX=0,n.skewY=(t*i+e*r)/a}return n.rotation=y._getRotation(n.rotation),n}}var g=Math.PI/180,u=180/Math.PI,f="Konva error: ",p={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},v=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/,m=[];const _="undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||function(t){setTimeout(t,60)},y={_isElement:t=>!(!t||1!=t.nodeType),_isFunction:t=>!!(t&&t.constructor&&t.call&&t.apply),_isPlainObject:t=>!!t&&t.constructor===Object,_isArray:t=>"[object Array]"===Object.prototype.toString.call(t),_isNumber:t=>"[object Number]"===Object.prototype.toString.call(t)&&!isNaN(t)&&isFinite(t),_isString:t=>"[object String]"===Object.prototype.toString.call(t),_isBoolean:t=>"[object Boolean]"===Object.prototype.toString.call(t),isObject:t=>t instanceof Object,isValidSelector(t){if("string"!=typeof t)return!1;var e=t[0];return"#"===e||"."===e||e===e.toUpperCase()},_sign:t=>0===t||t>0?1:-1,requestAnimFrame(t){m.push(t),1===m.length&&_((function(){const t=m;m=[],t.forEach((function(t){t()}))}))},createCanvasElement(){var t=document.createElement("canvas");try{t.style=t.style||{}}catch(t){}return t},createImageElement:()=>document.createElement("img"),_isInDocument(t){for(;t=t.parentNode;)if(t==document)return!0;return!1},_urlToImage(t,e){var i=y.createImageElement();i.onload=function(){e(i)},i.src=t},_rgbToHex:(t,e,i)=>((1<<24)+(t<<16)+(e<<8)+i).toString(16).slice(1),_hexToRgb(t){t=t.replace("#","");var e=parseInt(t,16);return{r:e>>16&255,g:e>>8&255,b:255&e}},getRandomColor(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},getRGB(t){var e;return t in p?{r:(e=p[t])[0],g:e[1],b:e[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(e=v.exec(t.replace(/ /g,"")),{r:parseInt(e[1],10),g:parseInt(e[2],10),b:parseInt(e[3],10)}):{r:0,g:0,b:0}},colorToRGBA:t=>(t=t||"black",y._namedColorToRBA(t)||y._hex3ColorToRGBA(t)||y._hex6ColorToRGBA(t)||y._rgbColorToRGBA(t)||y._rgbaColorToRGBA(t)||y._hslColorToRGBA(t)),_namedColorToRBA(t){var e=p[t.toLowerCase()];return e?{r:e[0],g:e[1],b:e[2],a:1}:null},_rgbColorToRGBA(t){if(0===t.indexOf("rgb(")){var e=(t=t.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:1}}},_rgbaColorToRGBA(t){if(0===t.indexOf("rgba(")){var e=(t=t.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:e[0],g:e[1],b:e[2],a:e[3]}}},_hex6ColorToRGBA(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:1}},_hex3ColorToRGBA(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:1}},_hslColorToRGBA(t){if(/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(t)){const[e,...i]=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(t),r=Number(i[0])/360,a=Number(i[1])/100,n=Number(i[2])/100;let s,o,h;if(0===a)return h=255*n,{r:Math.round(h),g:Math.round(h),b:Math.round(h),a:1};s=n<.5?n*(1+a):n+a-n*a;const l=2*n-s,d=[0,0,0];for(let t=0;t<3;t++)o=r+1/3*-(t-1),o<0&&o++,o>1&&o--,h=6*o<1?l+6*(s-l)*o:2*o<1?s:3*o<2?l+(s-l)*(2/3-o)*6:l,d[t]=255*h;return{r:Math.round(d[0]),g:Math.round(d[1]),b:Math.round(d[2]),a:1}}},haveIntersection:(t,e)=>!(e.x>t.x+t.width||e.x+e.width<t.x||e.y>t.y+t.height||e.y+e.height<t.y),cloneObject(t){var e={};for(var i in t)this._isPlainObject(t[i])?e[i]=this.cloneObject(t[i]):this._isArray(t[i])?e[i]=this.cloneArray(t[i]):e[i]=t[i];return e},cloneArray:t=>t.slice(0),degToRad:t=>t*g,radToDeg:t=>t*u,_degToRad:t=>(y.warn("Util._degToRad is removed. Please use public Util.degToRad instead."),y.degToRad(t)),_radToDeg:t=>(y.warn("Util._radToDeg is removed. Please use public Util.radToDeg instead."),y.radToDeg(t)),_getRotation:t=>l.angleDeg?y.radToDeg(t):t,_capitalize:t=>t.charAt(0).toUpperCase()+t.slice(1),throw(t){throw new Error(f+t)},error(t){console.error(f+t)},warn(t){l.showWarnings&&console.warn("Konva warning: "+t)},each(t,e){for(var i in t)e(i,t[i])},_inRange:(t,e,i)=>e<=t&&t<i,_getProjectionToSegment(t,e,i,r,a,n){var s,o,h,l=(t-i)*(t-i)+(e-r)*(e-r);if(0==l)s=t,o=e,h=(a-i)*(a-i)+(n-r)*(n-r);else{var d=((a-t)*(i-t)+(n-e)*(r-e))/l;d<0?(s=t,o=e,h=(t-a)*(t-a)+(e-n)*(e-n)):d>1?(s=i,o=r,h=(i-a)*(i-a)+(r-n)*(r-n)):h=((s=t+d*(i-t))-a)*(s-a)+((o=e+d*(r-e))-n)*(o-n)}return[s,o,h]},_getProjectionToLine(t,e,i){var r=y.cloneObject(t),a=Number.MAX_VALUE;return e.forEach((function(n,s){if(i||s!==e.length-1){var o=e[(s+1)%e.length],h=y._getProjectionToSegment(n.x,n.y,o.x,o.y,t.x,t.y),l=h[0],d=h[1],c=h[2];c<a&&(r.x=l,r.y=d,a=c)}})),r},_prepareArrayForTween(t,e,i){var r,a=[],n=[];if(t.length>e.length){var s=e;e=t,t=s}for(r=0;r<t.length;r+=2)a.push({x:t[r],y:t[r+1]});for(r=0;r<e.length;r+=2)n.push({x:e[r],y:e[r+1]});var o=[];return n.forEach((function(t){var e=y._getProjectionToLine(t,a,i);o.push(e.x),o.push(e.y)})),o},_prepareToStringify(t){var e;for(var i in t.visitedByCircularReferenceRemoval=!0,t)if(t.hasOwnProperty(i)&&t[i]&&"object"==typeof t[i])if(e=Object.getOwnPropertyDescriptor(t,i),t[i].visitedByCircularReferenceRemoval||y._isElement(t[i])){if(!e.configurable)return null;delete t[i]}else if(null===y._prepareToStringify(t[i])){if(!e.configurable)return null;delete t[i]}return delete t.visitedByCircularReferenceRemoval,t},_assign(t,e){for(var i in e)t[i]=e[i];return t},_getFirstPointerId:t=>t.touches?t.changedTouches[0].identifier:999};function x(t){return y._isString(t)?'"'+t+'"':"[object Number]"===Object.prototype.toString.call(t)||y._isBoolean(t)?t:Object.prototype.toString.call(t)}function b(t){return t>255?255:t<0?0:Math.round(t)}function w(){if(l.isUnminified)return function(t,e){return y._isNumber(t)||y.warn(x(t)+' is a not valid value for "'+e+'" attribute. The value should be a number.'),t}}function S(t){if(l.isUnminified)return function(e,i){let r=y._isNumber(e),a=y._isArray(e)&&e.length==t;return r||a||y.warn(x(e)+' is a not valid value for "'+i+'" attribute. The value should be a number or Array<number>('+t+")"),e}}function C(){if(l.isUnminified)return function(t,e){return y._isNumber(t)||"auto"===t||y.warn(x(t)+' is a not valid value for "'+e+'" attribute. The value should be a number or "auto".'),t}}function P(){if(l.isUnminified)return function(t,e){return y._isString(t)||y.warn(x(t)+' is a not valid value for "'+e+'" attribute. The value should be a string.'),t}}function k(){if(l.isUnminified)return function(t,e){const i=y._isString(t),r="[object CanvasGradient]"===Object.prototype.toString.call(t)||t&&t.addColorStop;return i||r||y.warn(x(t)+' is a not valid value for "'+e+'" attribute. The value should be a string or a native gradient.'),t}}function T(){if(l.isUnminified)return function(t,e){return!0===t||!1===t||y.warn(x(t)+' is a not valid value for "'+e+'" attribute. The value should be a boolean.'),t}}var A="get",M="set";const G={addGetterSetter(t,e,i,r,a){G.addGetter(t,e,i),G.addSetter(t,e,r,a),G.addOverloadedGetterSetter(t,e)},addGetter(t,e,i){var r=A+y._capitalize(e);t.prototype[r]=t.prototype[r]||function(){var t=this.attrs[e];return void 0===t?i:t}},addSetter(t,e,i,r){var a=M+y._capitalize(e);t.prototype[a]||G.overWriteSetter(t,e,i,r)},overWriteSetter(t,e,i,r){var a=M+y._capitalize(e);t.prototype[a]=function(t){return i&&null!=t&&(t=i.call(this,t,e)),this._setAttr(e,t),r&&r.call(this),this}},addComponentsGetterSetter(t,e,i,r,a){var n,s,o=i.length,h=y._capitalize,d=A+h(e),c=M+h(e);t.prototype[d]=function(){var t={};for(n=0;n<o;n++)t[s=i[n]]=this.getAttr(e+h(s));return t};var g=function(t){if(l.isUnminified)return function(e,i){return y.isObject(e)||y.warn(x(e)+' is a not valid value for "'+i+'" attribute. The value should be an object with properties '+t),e}}(i);t.prototype[c]=function(t){var i,n=this.attrs[e];for(i in r&&(t=r.call(this,t)),g&&g.call(this,t,e),t)t.hasOwnProperty(i)&&this._setAttr(e+h(i),t[i]);return this._fireChangeEvent(e,n,t),a&&a.call(this),this},G.addOverloadedGetterSetter(t,e)},addOverloadedGetterSetter(t,e){var i=y._capitalize(e),r=M+i,a=A+i;t.prototype[e]=function(){return arguments.length?(this[r](arguments[0]),this):this[a]()}},addDeprecatedGetterSetter(t,e,i,r){y.error("Adding deprecated "+e);var a=A+y._capitalize(e),n=e+" property is deprecated and will be removed soon. Look at Konva change log for more information.";t.prototype[a]=function(){y.error(n);var t=this.attrs[e];return void 0===t?i:t},G.addSetter(t,e,r,(function(){y.error(n)})),G.addOverloadedGetterSetter(t,e)},backCompat(t,e){y.each(e,(function(e,i){var r=t.prototype[i],a=A+y._capitalize(e),n=M+y._capitalize(e);function s(){r.apply(this,arguments),y.error('"'+e+'" method is deprecated and will be removed soon. Use ""'+i+'" instead.')}t.prototype[e]=s,t.prototype[a]=s,t.prototype[n]=s}))},afterSetFilter(){this._filterUpToDate=!1}};function L(t){var e,i,r=[],a=t.length,n=y;for(e=0;e<a;e++)i=t[e],n._isNumber(i)?i=Math.round(1e3*i)/1e3:n._isString(i)||(i+=""),r.push(i);return r}var E,R=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","ellipse","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"];class D{constructor(t){this.canvas=t,this._context=t._canvas.getContext("2d"),l.enableTrace&&(this.traceArr=[],this._enableTrace())}fillShape(t){t.fillEnabled()&&this._fill(t)}_fill(t){}strokeShape(t){t.hasStroke()&&this._stroke(t)}_stroke(t){}fillStrokeShape(t){t.attrs.fillAfterStrokeEnabled?(this.strokeShape(t),this.fillShape(t)):(this.fillShape(t),this.strokeShape(t))}getTrace(t,e){var i,r,a,n,s=this.traceArr,o=s.length,h="";for(i=0;i<o;i++)(a=(r=s[i]).method)?(n=r.args,h+=a,t?h+="()":y._isArray(n[0])?h+="(["+n.join(",")+"])":(e&&(n=n.map((t=>"number"==typeof t?Math.floor(t):t))),h+="("+n.join(",")+")")):(h+=r.property,t||(h+="="+r.val)),h+=";";return h}clearTrace(){this.traceArr=[]}_trace(t){var e=this.traceArr;e.push(t),e.length>=100&&e.shift()}reset(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)}getCanvas(){return this.canvas}clear(t){var e=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,e.getWidth()/e.pixelRatio,e.getHeight()/e.pixelRatio)}_applyLineCap(t){var e=t.getLineCap();e&&this.setAttr("lineCap",e)}_applyOpacity(t){var e=t.getAbsoluteOpacity();1!==e&&this.setAttr("globalAlpha",e)}_applyLineJoin(t){var e=t.attrs.lineJoin;e&&this.setAttr("lineJoin",e)}setAttr(t,e){this._context[t]=e}arc(t,e,i,r,a,n){this._context.arc(t,e,i,r,a,n)}arcTo(t,e,i,r,a){this._context.arcTo(t,e,i,r,a)}beginPath(){this._context.beginPath()}bezierCurveTo(t,e,i,r,a,n){this._context.bezierCurveTo(t,e,i,r,a,n)}clearRect(t,e,i,r){this._context.clearRect(t,e,i,r)}clip(){this._context.clip()}closePath(){this._context.closePath()}createImageData(t,e){var i=arguments;return 2===i.length?this._context.createImageData(t,e):1===i.length?this._context.createImageData(t):void 0}createLinearGradient(t,e,i,r){return this._context.createLinearGradient(t,e,i,r)}createPattern(t,e){return this._context.createPattern(t,e)}createRadialGradient(t,e,i,r,a,n){return this._context.createRadialGradient(t,e,i,r,a,n)}drawImage(t,e,i,r,a,n,s,o,h){var l=arguments,d=this._context;3===l.length?d.drawImage(t,e,i):5===l.length?d.drawImage(t,e,i,r,a):9===l.length&&d.drawImage(t,e,i,r,a,n,s,o,h)}ellipse(t,e,i,r,a,n,s,o){this._context.ellipse(t,e,i,r,a,n,s,o)}isPointInPath(t,e){return this._context.isPointInPath(t,e)}fill(t){t?this._context.fill(t):this._context.fill()}fillRect(t,e,i,r){this._context.fillRect(t,e,i,r)}strokeRect(t,e,i,r){this._context.strokeRect(t,e,i,r)}fillText(t,e,i,r){r?this._context.fillText(t,e,i,r):this._context.fillText(t,e,i)}measureText(t){return this._context.measureText(t)}getImageData(t,e,i,r){return this._context.getImageData(t,e,i,r)}lineTo(t,e){this._context.lineTo(t,e)}moveTo(t,e){this._context.moveTo(t,e)}rect(t,e,i,r){this._context.rect(t,e,i,r)}putImageData(t,e,i){this._context.putImageData(t,e,i)}quadraticCurveTo(t,e,i,r){this._context.quadraticCurveTo(t,e,i,r)}restore(){this._context.restore()}rotate(t){this._context.rotate(t)}save(){this._context.save()}scale(t,e){this._context.scale(t,e)}setLineDash(t){this._context.setLineDash?this._context.setLineDash(t):"mozDash"in this._context?this._context.mozDash=t:"webkitLineDash"in this._context&&(this._context.webkitLineDash=t)}getLineDash(){return this._context.getLineDash()}setTransform(t,e,i,r,a,n){this._context.setTransform(t,e,i,r,a,n)}stroke(t){t?this._context.stroke(t):this._context.stroke()}strokeText(t,e,i,r){this._context.strokeText(t,e,i,r)}transform(t,e,i,r,a,n){this._context.transform(t,e,i,r,a,n)}translate(t,e){this._context.translate(t,e)}_enableTrace(){var t,e,i=this,r=R.length,a=this.setAttr,n=function(t){var r,a=i[t];i[t]=function(){return e=L(Array.prototype.slice.call(arguments,0)),r=a.apply(i,arguments),i._trace({method:t,args:e}),r}};for(t=0;t<r;t++)n(R[t]);i.setAttr=function(){a.apply(i,arguments);var t=arguments[0],e=arguments[1];"shadowOffsetX"!==t&&"shadowOffsetY"!==t&&"shadowBlur"!==t||(e/=this.canvas.getPixelRatio()),i._trace({property:t,val:e})}}_applyGlobalCompositeOperation(t){const e=t.attrs.globalCompositeOperation;!e||"source-over"===e||this.setAttr("globalCompositeOperation",e)}}["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation","imageSmoothingEnabled"].forEach((function(t){Object.defineProperty(D.prototype,t,{get(){return this._context[t]},set(e){this._context[t]=e}})}));class O extends D{_fillColor(t){var e=t.fill();this.setAttr("fillStyle",e),t._fillFunc(this)}_fillPattern(t){this.setAttr("fillStyle",t._getFillPattern()),t._fillFunc(this)}_fillLinearGradient(t){var e=t._getLinearGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))}_fillRadialGradient(t){var e=t._getRadialGradient();e&&(this.setAttr("fillStyle",e),t._fillFunc(this))}_fill(t){var e=t.fill(),i=t.getFillPriority();if(e&&"color"===i)this._fillColor(t);else{var r=t.getFillPatternImage();if(r&&"pattern"===i)this._fillPattern(t);else{var a=t.getFillLinearGradientColorStops();if(a&&"linear-gradient"===i)this._fillLinearGradient(t);else{var n=t.getFillRadialGradientColorStops();n&&"radial-gradient"===i?this._fillRadialGradient(t):e?this._fillColor(t):r?this._fillPattern(t):a?this._fillLinearGradient(t):n&&this._fillRadialGradient(t)}}}}_strokeLinearGradient(t){var e=t.getStrokeLinearGradientStartPoint(),i=t.getStrokeLinearGradientEndPoint(),r=t.getStrokeLinearGradientColorStops(),a=this.createLinearGradient(e.x,e.y,i.x,i.y);if(r){for(var n=0;n<r.length;n+=2)a.addColorStop(r[n],r[n+1]);this.setAttr("strokeStyle",a)}}_stroke(t){var e=t.dash(),i=t.getStrokeScaleEnabled();if(t.hasStroke()){if(!i){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(t),e&&t.dashEnabled()&&(this.setLineDash(e),this.setAttr("lineDashOffset",t.dashOffset())),this.setAttr("lineWidth",t.strokeWidth()),t.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),t.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(t):this.setAttr("strokeStyle",t.stroke()),t._strokeFunc(this),i||this.restore()}}_applyShadow(t){var e,i,r,a=null!==(e=t.getShadowRGBA())&&void 0!==e?e:"black",n=null!==(i=t.getShadowBlur())&&void 0!==i?i:5,s=null!==(r=t.getShadowOffset())&&void 0!==r?r:{x:0,y:0},o=t.getAbsoluteScale(),h=this.canvas.getPixelRatio(),l=o.x*h,d=o.y*h;this.setAttr("shadowColor",a),this.setAttr("shadowBlur",n*Math.min(Math.abs(l),Math.abs(d))),this.setAttr("shadowOffsetX",s.x*l),this.setAttr("shadowOffsetY",s.y*d)}}class I extends D{_fill(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()}strokeShape(t){t.hasHitStroke()&&this._stroke(t)}_stroke(t){if(t.hasHitStroke()){var e=t.getStrokeScaleEnabled();if(!e){this.save();var i=this.getCanvas().getPixelRatio();this.setTransform(i,0,0,i,0,0)}this._applyLineCap(t);var r=t.hitStrokeWidth(),a="auto"===r?t.strokeWidth():r;this.setAttr("lineWidth",a),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this),e||this.restore()}}}class F{constructor(t){this.pixelRatio=1,this.width=0,this.height=0,this.isCache=!1;var e=(t||{}).pixelRatio||l.pixelRatio||function(){if(E)return E;var t=y.createCanvasElement().getContext("2d");return E=(l._global.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)}();this.pixelRatio=e,this._canvas=y.createCanvasElement(),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.border="0",this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top="0",this._canvas.style.left="0"}getContext(){return this.context}getPixelRatio(){return this.pixelRatio}setPixelRatio(t){var e=this.pixelRatio;this.pixelRatio=t,this.setSize(this.getWidth()/e,this.getHeight()/e)}setWidth(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)}setHeight(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px";var e=this.pixelRatio;this.getContext()._context.scale(e,e)}getWidth(){return this.width}getHeight(){return this.height}setSize(t,e){this.setWidth(t||0),this.setHeight(e||0)}toDataURL(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return y.error("Unable to get data URL. "+t.message+" For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html."),""}}}}G.addGetterSetter(F,"pixelRatio",void 0,w());class N extends F{constructor(t={width:0,height:0}){super(t),this.context=new O(this),this.setSize(t.width,t.height)}}class B extends F{constructor(t={width:0,height:0}){super(t),this.hitCanvas=!0,this.context=new I(this),this.setSize(t.width,t.height)}}const W={get isDragging(){var t=!1;return W._dragElements.forEach((e=>{"dragging"===e.dragStatus&&(t=!0)})),t},justDragged:!1,get node(){var t;return W._dragElements.forEach((e=>{t=e.node})),t},_dragElements:new Map,_drag(t){const e=[];W._dragElements.forEach(((i,r)=>{const{node:a}=i,n=a.getStage();n.setPointersPositions(t),void 0===i.pointerId&&(i.pointerId=y._getFirstPointerId(t));const s=n._changedPointerPositions.find((t=>t.id===i.pointerId));if(s){if("dragging"!==i.dragStatus){var o=a.dragDistance();if(Math.max(Math.abs(s.x-i.startPointerPos.x),Math.abs(s.y-i.startPointerPos.y))<o)return;if(a.startDrag({evt:t}),!a.isDragging())return}a._setDragPosition(t,i),e.push(a)}})),e.forEach((e=>{e.fire("dragmove",{type:"dragmove",target:e,evt:t},!0)}))},_endDragBefore(t){W._dragElements.forEach((e=>{const{node:i}=e,r=i.getStage();if(t&&r.setPointersPositions(t),!r._changedPointerPositions.find((t=>t.id===e.pointerId)))return;"dragging"!==e.dragStatus&&"stopped"!==e.dragStatus||(W.justDragged=!0,l._mouseListenClick=!1,l._touchListenClick=!1,l._pointerListenClick=!1,e.dragStatus="stopped");const a=e.node.getLayer()||e.node instanceof l.Stage&&e.node;a&&a.batchDraw()}))},_endDragAfter(t){W._dragElements.forEach(((e,i)=>{"stopped"===e.dragStatus&&e.node.fire("dragend",{type:"dragend",target:e.node,evt:t},!0),"dragging"!==e.dragStatus&&W._dragElements.delete(i)}))}};l.isBrowser&&(window.addEventListener("mouseup",W._endDragBefore,!0),window.addEventListener("touchend",W._endDragBefore,!0),window.addEventListener("mousemove",W._drag),window.addEventListener("touchmove",W._drag),window.addEventListener("mouseup",W._endDragAfter,!1),window.addEventListener("touchend",W._endDragAfter,!1));var H="absoluteOpacity",z="allEventListeners",q="absoluteTransform",Y="absoluteScale",X="canvas",U="listening",j="mouseenter",Q="mouseleave",V="Shape",K=" ",J="stage",$="transform",Z="visible",tt=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(K);let et=1;class it{constructor(t){this._id=et++,this.eventListeners={},this.attrs={},this.index=0,this._allEventListeners=null,this.parent=null,this._cache=new Map,this._attachedDepsListeners=new Map,this._lastPos=null,this._batchingTransformChange=!1,this._needClearTransformCache=!1,this._filterUpToDate=!1,this._isUnderCache=!1,this._dragEventId=null,this._shouldFireChangeEvents=!1,this.setAttrs(t),this._shouldFireChangeEvents=!0}hasChildren(){return!1}_clearCache(t){t!==$&&t!==q||!this._cache.get(t)?t?this._cache.delete(t):this._cache.clear():this._cache.get(t).dirty=!0}_getCache(t,e){var i=this._cache.get(t);return(void 0===i||(t===$||t===q)&&!0===i.dirty)&&(i=e.call(this),this._cache.set(t,i)),i}_calculate(t,e,i){if(!this._attachedDepsListeners.get(t)){const i=e.map((t=>t+"Change.konva")).join(K);this.on(i,(()=>{this._clearCache(t)})),this._attachedDepsListeners.set(t,!0)}return this._getCache(t,i)}_getCanvasCache(){return this._cache.get(X)}_clearSelfAndDescendantCache(t){this._clearCache(t),t===q&&this.fire("absoluteTransformChange")}clearCache(){return this._cache.delete(X),this._clearSelfAndDescendantCache(),this._requestDraw(),this}cache(t){var e=t||{},i={};void 0!==e.x&&void 0!==e.y&&void 0!==e.width&&void 0!==e.height||(i=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var r=Math.ceil(e.width||i.width),a=Math.ceil(e.height||i.height),n=e.pixelRatio,s=void 0===e.x?i.x:e.x,o=void 0===e.y?i.y:e.y,h=e.offset||0,l=e.drawBorder||!1,d=e.hitCanvasPixelRatio||1;if(r&&a){s-=h,o-=h;var c=new N({pixelRatio:n,width:r+=2*h,height:a+=2*h}),g=new N({pixelRatio:n,width:0,height:0}),u=new B({pixelRatio:d,width:r,height:a}),f=c.getContext(),p=u.getContext();return u.isCache=!0,c.isCache=!0,this._cache.delete(X),this._filterUpToDate=!1,!1===e.imageSmoothingEnabled&&(c.getContext()._context.imageSmoothingEnabled=!1,g.getContext()._context.imageSmoothingEnabled=!1),f.save(),p.save(),f.translate(-s,-o),p.translate(-s,-o),this._isUnderCache=!0,this._clearSelfAndDescendantCache(H),this._clearSelfAndDescendantCache(Y),this.drawScene(c,this),this.drawHit(u,this),this._isUnderCache=!1,f.restore(),p.restore(),l&&(f.save(),f.beginPath(),f.rect(0,0,r,a),f.closePath(),f.setAttr("strokeStyle","red"),f.setAttr("lineWidth",5),f.stroke(),f.restore()),this._cache.set(X,{scene:c,filter:g,hit:u,x:s,y:o}),this._requestDraw(),this}y.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")}isCached(){return this._cache.has(X)}getClientRect(t){throw new Error('abstract "getClientRect" method call')}_transformedRect(t,e){var i,r,a,n,s=[{x:t.x,y:t.y},{x:t.x+t.width,y:t.y},{x:t.x+t.width,y:t.y+t.height},{x:t.x,y:t.y+t.height}],o=this.getAbsoluteTransform(e);return s.forEach((function(t){var e=o.point(t);void 0===i&&(i=a=e.x,r=n=e.y),i=Math.min(i,e.x),r=Math.min(r,e.y),a=Math.max(a,e.x),n=Math.max(n,e.y)})),{x:i,y:r,width:a-i,height:n-r}}_drawCachedSceneCanvas(t){t.save(),t._applyOpacity(this),t._applyGlobalCompositeOperation(this);const e=this._getCanvasCache();t.translate(e.x,e.y);var i=this._getCachedSceneCanvas(),r=i.pixelRatio;t.drawImage(i._canvas,0,0,i.width/r,i.height/r),t.restore()}_drawCachedHitCanvas(t){var e=this._getCanvasCache(),i=e.hit;t.save(),t.translate(e.x,e.y),t.drawImage(i._canvas,0,0,i.width/i.pixelRatio,i.height/i.pixelRatio),t.restore()}_getCachedSceneCanvas(){var t,e,i,r,a=this.filters(),n=this._getCanvasCache(),s=n.scene,o=n.filter,h=o.getContext();if(a){if(!this._filterUpToDate){var l=s.pixelRatio;o.setSize(s.width/s.pixelRatio,s.height/s.pixelRatio);try{for(t=a.length,h.clear(),h.drawImage(s._canvas,0,0,s.getWidth()/l,s.getHeight()/l),e=h.getImageData(0,0,o.getWidth(),o.getHeight()),i=0;i<t;i++)"function"==typeof(r=a[i])?(r.call(this,e),h.putImageData(e,0,0)):y.error("Filter should be type of function, but got "+typeof r+" instead. Please check correct filters")}catch(t){y.error("Unable to apply filter. "+t.message+" This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.")}this._filterUpToDate=!0}return o}return s}on(t,e){if(this._cache&&this._cache.delete(z),3===arguments.length)return this._delegate.apply(this,arguments);var i,r,a,n,s=t.split(K),o=s.length;for(i=0;i<o;i++)a=(r=s[i].split("."))[0],n=r[1]||"",this.eventListeners[a]||(this.eventListeners[a]=[]),this.eventListeners[a].push({name:n,handler:e});return this}off(t,e){var i,r,a,n,s,o=(t||"").split(K),h=o.length;if(this._cache&&this._cache.delete(z),!t)for(r in this.eventListeners)this._off(r);for(i=0;i<h;i++)if(n=(a=o[i].split("."))[0],s=a[1],n)this.eventListeners[n]&&this._off(n,s,e);else for(r in this.eventListeners)this._off(r,s,e);return this}dispatchEvent(t){var e={target:this,type:t.type,evt:t};return this.fire(t.type,e),this}addEventListener(t,e){return this.on(t,(function(t){e.call(this,t.evt)})),this}removeEventListener(t){return this.off(t),this}_delegate(t,e,i){var r=this;this.on(t,(function(t){for(var a=t.target.findAncestors(e,!0,r),n=0;n<a.length;n++)(t=y.cloneObject(t)).currentTarget=a[n],i.call(a[n],t)}))}remove(){return this.isDragging()&&this.stopDrag(),W._dragElements.delete(this._id),this._remove(),this}_clearCaches(){this._clearSelfAndDescendantCache(q),this._clearSelfAndDescendantCache(H),this._clearSelfAndDescendantCache(Y),this._clearSelfAndDescendantCache(J),this._clearSelfAndDescendantCache(Z),this._clearSelfAndDescendantCache(U)}_remove(){this._clearCaches();var t=this.getParent();t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),this.parent=null)}destroy(){return this.remove(),this}getAttr(t){var e="get"+y._capitalize(t);return y._isFunction(this[e])?this[e]():this.attrs[t]}getAncestors(){for(var t=this.getParent(),e=[];t;)e.push(t),t=t.getParent();return e}getAttrs(){return this.attrs||{}}setAttrs(t){return this._batchTransformChanges((()=>{var e,i;if(!t)return this;for(e in t)"children"!==e&&(i="set"+y._capitalize(e),y._isFunction(this[i])?this[i](t[e]):this._setAttr(e,t[e]))})),this}isListening(){return this._getCache(U,this._isListening)}_isListening(t){if(!this.listening())return!1;const e=this.getParent();return!e||e===t||this===t||e._isListening(t)}isVisible(){return this._getCache(Z,this._isVisible)}_isVisible(t){if(!this.visible())return!1;const e=this.getParent();return!e||e===t||this===t||e._isVisible(t)}shouldDrawHit(t,e=!1){if(t)return this._isVisible(t)&&this._isListening(t);var i=this.getLayer(),r=!1;W._dragElements.forEach((t=>{"dragging"===t.dragStatus&&("Stage"===t.node.nodeType||t.node.getLayer()===i)&&(r=!0)}));var a=!e&&!l.hitOnDragEnabled&&r;return this.isListening()&&this.isVisible()&&!a}show(){return this.visible(!0),this}hide(){return this.visible(!1),this}getZIndex(){return this.index||0}getAbsoluteZIndex(){var t,e,i,r,a=this.getDepth(),n=this,s=0;return"Stage"!==n.nodeType&&function o(h){for(t=[],e=h.length,i=0;i<e;i++)r=h[i],s++,r.nodeType!==V&&(t=t.concat(r.getChildren().slice())),r._id===n._id&&(i=e);t.length>0&&t[0].getDepth()<=a&&o(t)}(n.getStage().getChildren()),s}getDepth(){for(var t=0,e=this.parent;e;)t++,e=e.parent;return t}_batchTransformChanges(t){this._batchingTransformChange=!0,t(),this._batchingTransformChange=!1,this._needClearTransformCache&&(this._clearCache($),this._clearSelfAndDescendantCache(q)),this._needClearTransformCache=!1}setPosition(t){return this._batchTransformChanges((()=>{this.x(t.x),this.y(t.y)})),this}getPosition(){return{x:this.x(),y:this.y()}}getRelativePointerPosition(){if(!this.getStage())return null;var t=this.getStage().getPointerPosition();if(!t)return null;var e=this.getAbsoluteTransform().copy();return e.invert(),e.point(t)}getAbsolutePosition(t){let e=!1,i=this.parent;for(;i;){if(i.isCached()){e=!0;break}i=i.parent}e&&!t&&(t=!0);var r=this.getAbsoluteTransform(t).getMatrix(),a=new c,n=this.offset();return a.m=r.slice(),a.translate(n.x,n.y),a.getTranslation()}setAbsolutePosition(t){var e=this._clearTransform();this.attrs.x=e.x,this.attrs.y=e.y,delete e.x,delete e.y,this._clearCache($);var i=this._getAbsoluteTransform().copy();return i.invert(),i.translate(t.x,t.y),t={x:this.attrs.x+i.getTranslation().x,y:this.attrs.y+i.getTranslation().y},this._setTransform(e),this.setPosition({x:t.x,y:t.y}),this._clearCache($),this._clearSelfAndDescendantCache(q),this}_setTransform(t){var e;for(e in t)this.attrs[e]=t[e]}_clearTransform(){var t={x:this.x(),y:this.y(),rotation:this.rotation(),scaleX:this.scaleX(),scaleY:this.scaleY(),offsetX:this.offsetX(),offsetY:this.offsetY(),skewX:this.skewX(),skewY:this.skewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,t}move(t){var e=t.x,i=t.y,r=this.x(),a=this.y();return void 0!==e&&(r+=e),void 0!==i&&(a+=i),this.setPosition({x:r,y:a}),this}_eachAncestorReverse(t,e){var i,r,a=[],n=this.getParent();if(!e||e._id!==this._id){for(a.unshift(this);n&&(!e||n._id!==e._id);)a.unshift(n),n=n.parent;for(i=a.length,r=0;r<i;r++)t(a[r])}}rotate(t){return this.rotation(this.rotation()+t),this}moveToTop(){if(!this.parent)return y.warn("Node has no parent. moveToTop function is ignored."),!1;var t=this.index;return this.parent.children.splice(t,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0}moveUp(){if(!this.parent)return y.warn("Node has no parent. moveUp function is ignored."),!1;var t=this.index;return t<this.parent.getChildren().length-1&&(this.parent.children.splice(t,1),this.parent.children.splice(t+1,0,this),this.parent._setChildrenIndices(),!0)}moveDown(){if(!this.parent)return y.warn("Node has no parent. moveDown function is ignored."),!1;var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.splice(t-1,0,this),this.parent._setChildrenIndices(),!0)}moveToBottom(){if(!this.parent)return y.warn("Node has no parent. moveToBottom function is ignored."),!1;var t=this.index;return t>0&&(this.parent.children.splice(t,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)}setZIndex(t){if(!this.parent)return y.warn("Node has no parent. zIndex parameter is ignored."),this;(t<0||t>=this.parent.children.length)&&y.warn("Unexpected value "+t+" for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to "+(this.parent.children.length-1)+".");var e=this.index;return this.parent.children.splice(e,1),this.parent.children.splice(t,0,this),this.parent._setChildrenIndices(),this}getAbsoluteOpacity(){return this._getCache(H,this._getAbsoluteOpacity)}_getAbsoluteOpacity(){var t=this.opacity(),e=this.getParent();return e&&!e._isUnderCache&&(t*=e.getAbsoluteOpacity()),t}moveTo(t){return this.getParent()!==t&&(this._remove(),t.add(this)),this}toObject(){var t,e,i,r,a={},n=this.getAttrs();for(t in a.attrs={},n)e=n[t],y.isObject(e)&&!y._isPlainObject(e)&&!y._isArray(e)||(i="function"==typeof this[t]&&this[t],delete n[t],r=i?i.call(this):null,n[t]=e,r!==e&&(a.attrs[t]=e));return a.className=this.getClassName(),y._prepareToStringify(a)}toJSON(){return JSON.stringify(this.toObject())}getParent(){return this.parent}findAncestors(t,e,i){var r=[];e&&this._isMatch(t)&&r.push(this);for(var a=this.parent;a;){if(a===i)return r;a._isMatch(t)&&r.push(a),a=a.parent}return r}isAncestorOf(t){return!1}findAncestor(t,e,i){return this.findAncestors(t,e,i)[0]}_isMatch(t){if(!t)return!1;if("function"==typeof t)return t(this);var e,i,r=t.replace(/ /g,"").split(","),a=r.length;for(e=0;e<a;e++)if(i=r[e],y.isValidSelector(i)||(y.warn('Selector "'+i+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),y.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),y.warn("Konva is awesome, right?")),"#"===i.charAt(0)){if(this.id()===i.slice(1))return!0}else if("."===i.charAt(0)){if(this.hasName(i.slice(1)))return!0}else if(this.className===i||this.nodeType===i)return!0;return!1}getLayer(){var t=this.getParent();return t?t.getLayer():null}getStage(){return this._getCache(J,this._getStage)}_getStage(){var t=this.getParent();return t?t.getStage():void 0}fire(t,e={},i){return e.target=e.target||this,i?this._fireAndBubble(t,e):this._fire(t,e),this}getAbsoluteTransform(t){return t?this._getAbsoluteTransform(t):this._getCache(q,this._getAbsoluteTransform)}_getAbsoluteTransform(t){var e;if(t)return e=new c,this._eachAncestorReverse((function(t){var i=t.transformsEnabled();"all"===i?e.multiply(t.getTransform()):"position"===i&&e.translate(t.x()-t.offsetX(),t.y()-t.offsetY())}),t),e;e=this._cache.get(q)||new c,this.parent?this.parent.getAbsoluteTransform().copyInto(e):e.reset();var i=this.transformsEnabled();if("all"===i)e.multiply(this.getTransform());else if("position"===i){const t=this.attrs.x||0,i=this.attrs.y||0,r=this.attrs.offsetX||0,a=this.attrs.offsetY||0;e.translate(t-r,i-a)}return e.dirty=!1,e}getAbsoluteScale(t){for(var e=this;e;)e._isUnderCache&&(t=e),e=e.getParent();const i=this.getAbsoluteTransform(t).decompose();return{x:i.scaleX,y:i.scaleY}}getAbsoluteRotation(){return this.getAbsoluteTransform().decompose().rotation}getTransform(){return this._getCache($,this._getTransform)}_getTransform(){var t,e,i=this._cache.get($)||new c;i.reset();var r=this.x(),a=this.y(),n=l.getAngle(this.rotation()),s=null!==(t=this.attrs.scaleX)&&void 0!==t?t:1,o=null!==(e=this.attrs.scaleY)&&void 0!==e?e:1,h=this.attrs.skewX||0,d=this.attrs.skewY||0,g=this.attrs.offsetX||0,u=this.attrs.offsetY||0;return 0===r&&0===a||i.translate(r,a),0!==n&&i.rotate(n),0===h&&0===d||i.skew(h,d),1===s&&1===o||i.scale(s,o),0===g&&0===u||i.translate(-1*g,-1*u),i.dirty=!1,i}clone(t){var e,i,r,a,n,s=y.cloneObject(this.attrs);for(e in t)s[e]=t[e];var o=new this.constructor(s);for(e in this.eventListeners)for(r=(i=this.eventListeners[e]).length,a=0;a<r;a++)(n=i[a]).name.indexOf("konva")<0&&(o.eventListeners[e]||(o.eventListeners[e]=[]),o.eventListeners[e].push(n));return o}_toKonvaCanvas(t){t=t||{};var e=this.getClientRect(),i=this.getStage(),r=void 0!==t.x?t.x:e.x,a=void 0!==t.y?t.y:e.y,n=t.pixelRatio||1,s=new N({width:t.width||e.width||(i?i.width():0),height:t.height||e.height||(i?i.height():0),pixelRatio:n}),o=s.getContext();return o.save(),(r||a)&&o.translate(-1*r,-1*a),this.drawScene(s),o.restore(),s}toCanvas(t){return this._toKonvaCanvas(t)._canvas}toDataURL(t){var e=(t=t||{}).mimeType||null,i=t.quality||null,r=this._toKonvaCanvas(t).toDataURL(e,i);return t.callback&&t.callback(r),r}toImage(t){if(!t||!t.callback)throw"callback required for toImage method config argument";var e=t.callback;delete t.callback,y._urlToImage(this.toDataURL(t),(function(t){e(t)}))}setSize(t){return this.width(t.width),this.height(t.height),this}getSize(){return{width:this.width(),height:this.height()}}getClassName(){return this.className||this.nodeType}getType(){return this.nodeType}getDragDistance(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():l.dragDistance}_off(t,e,i){var r,a,n,s=this.eventListeners[t];for(r=0;r<s.length;r++)if(a=s[r].name,n=s[r].handler,!("konva"===a&&"konva"!==e||e&&a!==e||i&&i!==n)){if(s.splice(r,1),0===s.length){delete this.eventListeners[t];break}r--}}_fireChangeEvent(t,e,i){this._fire(t+"Change",{oldVal:e,newVal:i})}addName(t){if(!this.hasName(t)){var e=this.name(),i=e?e+" "+t:t;this.name(i)}return this}hasName(t){if(!t)return!1;const e=this.name();return!!e&&-1!==(e||"").split(/\s/g).indexOf(t)}removeName(t){var e=(this.name()||"").split(/\s/g),i=e.indexOf(t);return-1!==i&&(e.splice(i,1),this.name(e.join(" "))),this}setAttr(t,e){var i=this["set"+y._capitalize(t)];return y._isFunction(i)?i.call(this,e):this._setAttr(t,e),this}_requestDraw(){if(l.autoDrawEnabled){const t=this.getLayer()||this.getStage();null==t||t.batchDraw()}}_setAttr(t,e){var i=this.attrs[t];(i!==e||y.isObject(e))&&(null==e?delete this.attrs[t]:this.attrs[t]=e,this._shouldFireChangeEvents&&this._fireChangeEvent(t,i,e),this._requestDraw())}_setComponentAttr(t,e,i){var r;void 0!==i&&((r=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][e]=i,this._fireChangeEvent(t,r,i))}_fireAndBubble(t,e,i){if(e&&this.nodeType===V&&(e.target=this),t!==j&&t!==Q||!(i&&(this===i||this.isAncestorOf&&this.isAncestorOf(i))||"Stage"===this.nodeType&&!i)){this._fire(t,e);var r=(t===j||t===Q)&&i&&i.isAncestorOf&&i.isAncestorOf(this)&&!i.isAncestorOf(this.parent);(e&&!e.cancelBubble||!e)&&this.parent&&this.parent.isListening()&&!r&&(i&&i.parent?this._fireAndBubble.call(this.parent,t,e,i):this._fireAndBubble.call(this.parent,t,e))}}_getProtoListeners(t){let e=this._cache.get(z);if(!e){e={};let t=Object.getPrototypeOf(this);for(;t;)if(t.eventListeners){for(var i in t.eventListeners){const r=t.eventListeners[i],a=e[i]||[];e[i]=r.concat(a)}t=Object.getPrototypeOf(t)}else t=Object.getPrototypeOf(t);this._cache.set(z,e)}return e[t]}_fire(t,e){(e=e||{}).currentTarget=this,e.type=t;const i=this._getProtoListeners(t);if(i)for(var r=0;r<i.length;r++)i[r].handler.call(this,e);const a=this.eventListeners[t];if(a)for(r=0;r<a.length;r++)a[r].handler.call(this,e)}draw(){return this.drawScene(),this.drawHit(),this}_createDragElement(t){var e=t?t.pointerId:void 0,i=this.getStage(),r=this.getAbsolutePosition(),a=i._getPointerById(e)||i._changedPointerPositions[0]||r;W._dragElements.set(this._id,{node:this,startPointerPos:a,offset:{x:a.x-r.x,y:a.y-r.y},dragStatus:"ready",pointerId:e})}startDrag(t,e=!0){W._dragElements.has(this._id)||this._createDragElement(t),W._dragElements.get(this._id).dragStatus="dragging",this.fire("dragstart",{type:"dragstart",target:this,evt:t&&t.evt},e)}_setDragPosition(t,e){const i=this.getStage()._getPointerById(e.pointerId);if(i){var r={x:i.x-e.offset.x,y:i.y-e.offset.y},a=this.dragBoundFunc();if(void 0!==a){const e=a.call(this,r,t);e?r=e:y.warn("dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.")}this._lastPos&&this._lastPos.x===r.x&&this._lastPos.y===r.y||(this.setAbsolutePosition(r),this._requestDraw()),this._lastPos=r}}stopDrag(t){const e=W._dragElements.get(this._id);e&&(e.dragStatus="stopped"),W._endDragBefore(t),W._endDragAfter(t)}setDraggable(t){this._setAttr("draggable",t),this._dragChange()}isDragging(){const t=W._dragElements.get(this._id);return!!t&&"dragging"===t.dragStatus}_listenDrag(){this._dragCleanup(),this.on("mousedown.konva touchstart.konva",(function(t){if((void 0===t.evt.button||l.dragButtons.indexOf(t.evt.button)>=0)&&!this.isDragging()){var e=!1;W._dragElements.forEach((t=>{this.isAncestorOf(t.node)&&(e=!0)})),e||this._createDragElement(t)}}))}_dragChange(){if(this.attrs.draggable)this._listenDrag();else{if(this._dragCleanup(),!this.getStage())return;const t=W._dragElements.get(this._id),e=t&&"dragging"===t.dragStatus,i=t&&"ready"===t.dragStatus;e?this.stopDrag():i&&W._dragElements.delete(this._id)}}_dragCleanup(){this.off("mousedown.konva"),this.off("touchstart.konva")}isClientRectOnScreen(t={x:0,y:0}){const e=this.getStage();if(!e)return!1;const i={x:-t.x,y:-t.y,width:e.width()+t.x,height:e.height()+t.y};return y.haveIntersection(i,this.getClientRect())}static create(t,e){return y._isString(t)&&(t=JSON.parse(t)),this._createNode(t,e)}static _createNode(t,e){var i,r,a,n=it.prototype.getClassName.call(t),s=t.children;if(e&&(t.attrs.container=e),l[n]||(y.warn('Can not find a node with class name "'+n+'". Fallback to "Shape".'),n="Shape"),i=new(0,l[n])(t.attrs),s)for(r=s.length,a=0;a<r;a++)i.add(it._createNode(s[a]));return i}}it.prototype.nodeType="Node",it.prototype._attrsAffectingSize=[],it.prototype.eventListeners={},it.prototype.on.call(it.prototype,tt,(function(){this._batchingTransformChange?this._needClearTransformCache=!0:(this._clearCache($),this._clearSelfAndDescendantCache(q))})),it.prototype.on.call(it.prototype,"visibleChange.konva",(function(){this._clearSelfAndDescendantCache(Z)})),it.prototype.on.call(it.prototype,"listeningChange.konva",(function(){this._clearSelfAndDescendantCache(U)})),it.prototype.on.call(it.prototype,"opacityChange.konva",(function(){this._clearSelfAndDescendantCache(H)}));const rt=G.addGetterSetter;rt(it,"zIndex"),rt(it,"absolutePosition"),rt(it,"position"),rt(it,"x",0,w()),rt(it,"y",0,w()),rt(it,"globalCompositeOperation","source-over",P()),rt(it,"opacity",1,w()),rt(it,"name","",P()),rt(it,"id","",P()),rt(it,"rotation",0,w()),G.addComponentsGetterSetter(it,"scale",["x","y"]),rt(it,"scaleX",1,w()),rt(it,"scaleY",1,w()),G.addComponentsGetterSetter(it,"skew",["x","y"]),rt(it,"skewX",0,w()),rt(it,"skewY",0,w()),G.addComponentsGetterSetter(it,"offset",["x","y"]),rt(it,"offsetX",0,w()),rt(it,"offsetY",0,w()),rt(it,"dragDistance",null,w()),rt(it,"width",0,w()),rt(it,"height",0,w()),rt(it,"listening",!0,T()),rt(it,"preventDefault",!0,T()),rt(it,"filters",null,(function(t){return this._filterUpToDate=!1,t})),rt(it,"visible",!0,T()),rt(it,"transformsEnabled","all",P()),rt(it,"size"),rt(it,"dragBoundFunc"),rt(it,"draggable",!1,T()),G.backCompat(it,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"});class at extends it{constructor(){super(...arguments),this.children=[]}getChildren(t){if(!t)return this.children||[];const e=this.children||[];var i=[];return e.forEach((function(e){t(e)&&i.push(e)})),i}hasChildren(){return this.getChildren().length>0}removeChildren(){return this.getChildren().forEach((t=>{t.parent=null,t.index=0,t.remove()})),this.children=[],this}destroyChildren(){return this.getChildren().forEach((t=>{t.parent=null,t.index=0,t.destroy()})),this.children=[],this}add(...t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}var i=t[0];return i.getParent()?(i.moveTo(this),this):(this._validateAdd(i),i.index=this.getChildren().length,i.parent=this,i._clearCaches(),this.getChildren().push(i),this._fire("add",{child:i}),this._requestDraw(),this)}destroy(){return this.hasChildren()&&this.destroyChildren(),super.destroy(),this}find(t){return this._generalFind(t,!1)}findOne(t){var e=this._generalFind(t,!0);return e.length>0?e[0]:void 0}_generalFind(t,e){var i=[];return this._descendants((r=>{const a=r._isMatch(t);return a&&i.push(r),!(!a||!e)})),i}_descendants(t){let e=!1;const i=this.getChildren();for(const r of i){if(e=t(r),e)return!0;if(r.hasChildren()&&(e=r._descendants(t),e))return!0}return!1}toObject(){var t=it.prototype.toObject.call(this);return t.children=[],this.getChildren().forEach((e=>{t.children.push(e.toObject())})),t}isAncestorOf(t){for(var e=t.getParent();e;){if(e._id===this._id)return!0;e=e.getParent()}return!1}clone(t){var e=it.prototype.clone.call(this,t);return this.getChildren().forEach((function(t){e.add(t.clone())})),e}getAllIntersections(t){var e=[];return this.find("Shape").forEach((function(i){i.isVisible()&&i.intersects(t)&&e.push(i)})),e}_clearSelfAndDescendantCache(t){var e;super._clearSelfAndDescendantCache(t),this.isCached()||null===(e=this.children)||void 0===e||e.forEach((function(e){e._clearSelfAndDescendantCache(t)}))}_setChildrenIndices(){var t;null===(t=this.children)||void 0===t||t.forEach((function(t,e){t.index=e})),this._requestDraw()}drawScene(t,e){var i=this.getLayer(),r=t||i&&i.getCanvas(),a=r&&r.getContext(),n=this._getCanvasCache(),s=n&&n.scene,o=r&&r.isCache;if(!this.isVisible()&&!o)return this;if(s){a.save();var h=this.getAbsoluteTransform(e).getMatrix();a.transform(h[0],h[1],h[2],h[3],h[4],h[5]),this._drawCachedSceneCanvas(a),a.restore()}else this._drawChildren("drawScene",r,e);return this}drawHit(t,e){if(!this.shouldDrawHit(e))return this;var i=this.getLayer(),r=t||i&&i.hitCanvas,a=r&&r.getContext(),n=this._getCanvasCache();if(n&&n.hit){a.save();var s=this.getAbsoluteTransform(e).getMatrix();a.transform(s[0],s[1],s[2],s[3],s[4],s[5]),this._drawCachedHitCanvas(a),a.restore()}else this._drawChildren("drawHit",r,e);return this}_drawChildren(t,e,i){var r,a=e&&e.getContext(),n=this.clipWidth(),s=this.clipHeight(),o=this.clipFunc(),h=n&&s||o;const l=i===this;if(h){a.save();var d=this.getAbsoluteTransform(i),c=d.getMatrix();if(a.transform(c[0],c[1],c[2],c[3],c[4],c[5]),a.beginPath(),o)o.call(this,a,this);else{var g=this.clipX(),u=this.clipY();a.rect(g,u,n,s)}a.clip(),c=d.copy().invert().getMatrix(),a.transform(c[0],c[1],c[2],c[3],c[4],c[5])}var f=!l&&"source-over"!==this.globalCompositeOperation()&&"drawScene"===t;f&&(a.save(),a._applyGlobalCompositeOperation(this)),null===(r=this.children)||void 0===r||r.forEach((function(r){r[t](e,i)})),f&&a.restore(),h&&a.restore()}getClientRect(t){var e,i,r,a,n,s,o=(t=t||{}).skipTransform,h=t.relativeTo,l=this;null===(e=this.children)||void 0===e||e.forEach((function(e){if(e.visible()){var s=e.getClientRect({relativeTo:l,skipShadow:t.skipShadow,skipStroke:t.skipStroke});0===s.width&&0===s.height||(void 0===i?(i=s.x,r=s.y,a=s.x+s.width,n=s.y+s.height):(i=Math.min(i,s.x),r=Math.min(r,s.y),a=Math.max(a,s.x+s.width),n=Math.max(n,s.y+s.height)))}}));for(var d=this.find("Shape"),c=!1,g=0;g<d.length;g++)if(d[g]._isVisible(this)){c=!0;break}return s=c&&void 0!==i?{x:i,y:r,width:a-i,height:n-r}:{x:0,y:0,width:0,height:0},o?s:this._transformedRect(s,h)}}G.addComponentsGetterSetter(at,"clip",["x","y","width","height"]),G.addGetterSetter(at,"clipX",void 0,w()),G.addGetterSetter(at,"clipY",void 0,w()),G.addGetterSetter(at,"clipWidth",void 0,w()),G.addGetterSetter(at,"clipHeight",void 0,w()),G.addGetterSetter(at,"clipFunc");const nt=new Map,st=void 0!==l._global.PointerEvent;function ot(t){return nt.get(t)}function ht(t){return{evt:t,pointerId:t.pointerId}}function lt(t,e){return nt.get(t)===e}function dt(t,e){ct(t),e.getStage()&&(nt.set(t,e),st&&e._fire("gotpointercapture",ht(new PointerEvent("gotpointercapture"))))}function ct(t,e){const i=nt.get(t);if(!i)return;const r=i.getStage();r&&r.content,nt.delete(t),st&&i._fire("lostpointercapture",ht(new PointerEvent("lostpointercapture")))}var gt="mouseleave",ut="mouseover",ft="mouseenter",pt="mousemove",vt="mousedown",mt="mouseup",_t="pointermove",yt="pointerdown",xt="pointerup",bt="pointercancel",wt="pointerout",St="pointerleave",Ct="pointerover",Pt="pointerenter",kt="contextmenu",Tt="touchstart",At="touchend",Mt="touchmove",Gt="touchcancel",Lt="wheel",Et=[[ft,"_pointerenter"],[vt,"_pointerdown"],[pt,"_pointermove"],[mt,"_pointerup"],[gt,"_pointerleave"],[Tt,"_pointerdown"],[Mt,"_pointermove"],[At,"_pointerup"],[Gt,"_pointercancel"],[ut,"_pointerover"],[Lt,"_wheel"],[kt,"_contextmenu"],[yt,"_pointerdown"],[_t,"_pointermove"],[xt,"_pointerup"],[bt,"_pointercancel"],["lostpointercapture","_lostpointercapture"]];const Rt={mouse:{[wt]:"mouseout",[St]:gt,[Ct]:ut,[Pt]:ft,[_t]:pt,[yt]:vt,[xt]:mt,[bt]:"mousecancel",pointerclick:"click",pointerdblclick:"dblclick"},touch:{[wt]:"touchout",[St]:"touchleave",[Ct]:"touchover",[Pt]:"touchenter",[_t]:Mt,[yt]:Tt,[xt]:At,[bt]:Gt,pointerclick:"tap",pointerdblclick:"dbltap"},pointer:{[wt]:wt,[St]:St,[Ct]:Ct,[Pt]:Pt,[_t]:_t,[yt]:yt,[xt]:xt,[bt]:bt,pointerclick:"pointerclick",pointerdblclick:"pointerdblclick"}},Dt=t=>t.indexOf("pointer")>=0?"pointer":t.indexOf("touch")>=0?"touch":"mouse",Ot=t=>{const e=Dt(t);return"pointer"===e?l.pointerEventsEnabled&&Rt.pointer:"touch"===e?Rt.touch:"mouse"===e?Rt.mouse:void 0};function It(t={}){return(t.clipFunc||t.clipWidth||t.clipHeight)&&y.warn("Stage does not support clipping. Please use clip for Layers or Groups."),t}const Ft=[];class Nt extends at{constructor(t){super(It(t)),this._pointerPositions=[],this._changedPointerPositions=[],this._buildDOM(),this._bindContentEvents(),Ft.push(this),this.on("widthChange.konva heightChange.konva",this._resizeDOM),this.on("visibleChange.konva",this._checkVisibility),this.on("clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva",(()=>{It(this.attrs)})),this._checkVisibility()}_validateAdd(t){const e="Layer"===t.getType(),i="FastLayer"===t.getType();e||i||y.throw("You may only add layers to the stage.")}_checkVisibility(){if(!this.content)return;const t=this.visible()?"":"none";this.content.style.display=t}setContainer(t){if("string"==typeof t){if("."===t.charAt(0)){var e=t.slice(1);t=document.getElementsByClassName(e)[0]}else{var i;i="#"!==t.charAt(0)?t:t.slice(1),t=document.getElementById(i)}if(!t)throw"Can not find container in document with id "+i}return this._setAttr("container",t),this.content&&(this.content.parentElement&&this.content.parentElement.removeChild(this.content),t.appendChild(this.content)),this}shouldDrawHit(){return!0}clear(){var t,e=this.children,i=e.length;for(t=0;t<i;t++)e[t].clear();return this}clone(t){return t||(t={}),t.container="undefined"!=typeof document&&document.createElement("div"),at.prototype.clone.call(this,t)}destroy(){super.destroy();var t=this.content;t&&y._isInDocument(t)&&this.container().removeChild(t);var e=Ft.indexOf(this);return e>-1&&Ft.splice(e,1),this}getPointerPosition(){const t=this._pointerPositions[0]||this._changedPointerPositions[0];return t?{x:t.x,y:t.y}:(y.warn("Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);"),null)}_getPointerById(t){return this._pointerPositions.find((e=>e.id===t))}getPointersPositions(){return this._pointerPositions}getStage(){return this}getContent(){return this.content}_toKonvaCanvas(t){(t=t||{}).x=t.x||0,t.y=t.y||0,t.width=t.width||this.width(),t.height=t.height||this.height();var e=new N({width:t.width,height:t.height,pixelRatio:t.pixelRatio||1}),i=e.getContext()._context,r=this.children;return(t.x||t.y)&&i.translate(-1*t.x,-1*t.y),r.forEach((function(e){if(e.isVisible()){var r=e._toKonvaCanvas(t);i.drawImage(r._canvas,t.x,t.y,r.getWidth()/r.getPixelRatio(),r.getHeight()/r.getPixelRatio())}})),e}getIntersection(t){if(!t)return null;var e,i=this.children;for(e=i.length-1;e>=0;e--){const r=i[e].getIntersection(t);if(r)return r}return null}_resizeDOM(){var t=this.width(),e=this.height();this.content&&(this.content.style.width=t+"px",this.content.style.height=e+"px"),this.bufferCanvas.setSize(t,e),this.bufferHitCanvas.setSize(t,e),this.children.forEach((i=>{i.setSize({width:t,height:e}),i.draw()}))}add(t,...e){if(arguments.length>1){for(var i=0;i<arguments.length;i++)this.add(arguments[i]);return this}super.add(t);var r=this.children.length;return r>5&&y.warn("The stage has "+r+" layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group."),t.setSize({width:this.width(),height:this.height()}),t.draw(),l.isBrowser&&this.content.appendChild(t.canvas._canvas),this}getParent(){return null}getLayer(){return null}hasPointerCapture(t){return lt(t,this)}setPointerCapture(t){dt(t,this)}releaseCapture(t){ct(t)}getLayers(){return this.children}_bindContentEvents(){l.isBrowser&&Et.forEach((([t,e])=>{this.content.addEventListener(t,(t=>{this[e](t)}))}))}_pointerenter(t){this.setPointersPositions(t);const e=Ot(t.type);this._fire(e.pointerenter,{evt:t,target:this,currentTarget:this})}_pointerover(t){this.setPointersPositions(t);const e=Ot(t.type);this._fire(e.pointerover,{evt:t,target:this,currentTarget:this})}_getTargetShape(t){let e=this[t+"targetShape"];return e&&!e.getStage()&&(e=null),e}_pointerleave(t){const e=Ot(t.type),i=Dt(t.type);if(e){this.setPointersPositions(t);var r=this._getTargetShape(i),a=!W.isDragging||l.hitOnDragEnabled;r&&a?(r._fireAndBubble(e.pointerout,{evt:t}),r._fireAndBubble(e.pointerleave,{evt:t}),this._fire(e.pointerleave,{evt:t,target:this,currentTarget:this}),this[i+"targetShape"]=null):a&&(this._fire(e.pointerleave,{evt:t,target:this,currentTarget:this}),this._fire(e.pointerout,{evt:t,target:this,currentTarget:this})),this.pointerPos=void 0,this._pointerPositions=[]}}_pointerdown(t){const e=Ot(t.type),i=Dt(t.type);if(e){this.setPointersPositions(t);var r=!1;this._changedPointerPositions.forEach((a=>{var n=this.getIntersection(a);if(W.justDragged=!1,l["_"+i+"ListenClick"]=!0,!n||!n.isListening())return;l.capturePointerEventsEnabled&&n.setPointerCapture(a.id),this[i+"ClickStartShape"]=n,n._fireAndBubble(e.pointerdown,{evt:t,pointerId:a.id}),r=!0;const s=t.type.indexOf("touch")>=0;n.preventDefault()&&t.cancelable&&s&&t.preventDefault()})),r||this._fire(e.pointerdown,{evt:t,target:this,currentTarget:this,pointerId:this._pointerPositions[0].id})}}_pointermove(t){const e=Ot(t.type),i=Dt(t.type);if(!e)return;if(W.isDragging&&W.node.preventDefault()&&t.cancelable&&t.preventDefault(),this.setPointersPositions(t),W.isDragging&&!l.hitOnDragEnabled)return;var r={};let a=!1;var n=this._getTargetShape(i);this._changedPointerPositions.forEach((s=>{const o=ot(s.id)||this.getIntersection(s),h=s.id,l={evt:t,pointerId:h};var d=n!==o;if(d&&n&&(n._fireAndBubble(e.pointerout,l,o),n._fireAndBubble(e.pointerleave,l,o)),o){if(r[o._id])return;r[o._id]=!0}o&&o.isListening()?(a=!0,d&&(o._fireAndBubble(e.pointerover,l,n),o._fireAndBubble(e.pointerenter,l,n),this[i+"targetShape"]=o),o._fireAndBubble(e.pointermove,l)):n&&(this._fire(e.pointerover,{evt:t,target:this,currentTarget:this,pointerId:h}),this[i+"targetShape"]=null)})),a||this._fire(e.pointermove,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id})}_pointerup(t){const e=Ot(t.type),i=Dt(t.type);if(!e)return;this.setPointersPositions(t);const r=this[i+"ClickStartShape"],a=this[i+"ClickEndShape"];var n={};let s=!1;this._changedPointerPositions.forEach((o=>{const h=ot(o.id)||this.getIntersection(o);if(h){if(h.releaseCapture(o.id),n[h._id])return;n[h._id]=!0}const d=o.id,c={evt:t,pointerId:d};let g=!1;l["_"+i+"InDblClickWindow"]?(g=!0,clearTimeout(this[i+"DblTimeout"])):W.justDragged||(l["_"+i+"InDblClickWindow"]=!0,clearTimeout(this[i+"DblTimeout"])),this[i+"DblTimeout"]=setTimeout((function(){l["_"+i+"InDblClickWindow"]=!1}),l.dblClickWindow),h&&h.isListening()?(s=!0,this[i+"ClickEndShape"]=h,h._fireAndBubble(e.pointerup,c),l["_"+i+"ListenClick"]&&r&&r===h&&(h._fireAndBubble(e.pointerclick,c),g&&a&&a===h&&h._fireAndBubble(e.pointerdblclick,c))):(this[i+"ClickEndShape"]=null,l["_"+i+"ListenClick"]&&this._fire(e.pointerclick,{evt:t,target:this,currentTarget:this,pointerId:d}),g&&this._fire(e.pointerdblclick,{evt:t,target:this,currentTarget:this,pointerId:d}))})),s||this._fire(e.pointerup,{evt:t,target:this,currentTarget:this,pointerId:this._changedPointerPositions[0].id}),l["_"+i+"ListenClick"]=!1,t.cancelable&&t.preventDefault()}_contextmenu(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(kt,{evt:t}):this._fire(kt,{evt:t,target:this,currentTarget:this})}_wheel(t){this.setPointersPositions(t);var e=this.getIntersection(this.getPointerPosition());e&&e.isListening()?e._fireAndBubble(Lt,{evt:t}):this._fire(Lt,{evt:t,target:this,currentTarget:this})}_pointercancel(t){this.setPointersPositions(t);const e=ot(t.pointerId)||this.getIntersection(this.getPointerPosition());e&&e._fireAndBubble(xt,ht(t)),ct(t.pointerId)}_lostpointercapture(t){ct(t.pointerId)}setPointersPositions(t){var e=this._getContentPosition(),i=null,r=null;void 0!==(t=t||window.event).touches?(this._pointerPositions=[],this._changedPointerPositions=[],Array.prototype.forEach.call(t.touches,(t=>{this._pointerPositions.push({id:t.identifier,x:(t.clientX-e.left)/e.scaleX,y:(t.clientY-e.top)/e.scaleY})})),Array.prototype.forEach.call(t.changedTouches||t.touches,(t=>{this._changedPointerPositions.push({id:t.identifier,x:(t.clientX-e.left)/e.scaleX,y:(t.clientY-e.top)/e.scaleY})}))):(i=(t.clientX-e.left)/e.scaleX,r=(t.clientY-e.top)/e.scaleY,this.pointerPos={x:i,y:r},this._pointerPositions=[{x:i,y:r,id:y._getFirstPointerId(t)}],this._changedPointerPositions=[{x:i,y:r,id:y._getFirstPointerId(t)}])}_setPointerPosition(t){y.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.'),this.setPointersPositions(t)}_getContentPosition(){if(!this.content||!this.content.getBoundingClientRect)return{top:0,left:0,scaleX:1,scaleY:1};var t=this.content.getBoundingClientRect();return{top:t.top,left:t.left,scaleX:t.width/this.content.clientWidth||1,scaleY:t.height/this.content.clientHeight||1}}_buildDOM(){if(this.bufferCanvas=new N({width:this.width(),height:this.height()}),this.bufferHitCanvas=new B({pixelRatio:1,width:this.width(),height:this.height()}),l.isBrowser){var t=this.container();if(!t)throw"Stage has no container. A container is required.";t.innerHTML="",this.content=document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this._resizeDOM()}}cache(){return y.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes."),this}clearCache(){return this}batchDraw(){return this.getChildren().forEach((function(t){t.batchDraw()})),this}}Nt.prototype.nodeType="Stage",d(Nt),G.addGetterSetter(Nt,"container");var Bt="hasShadow",Wt="shadowRGBA",Ht="patternImage",zt="linearGradient",qt="radialGradient";let Yt;function Xt(){return Yt||(Yt=y.createCanvasElement().getContext("2d"),Yt)}const Ut={};class jt extends it{constructor(t){let e;for(super(t);e=y.getRandomColor(),!e||e in Ut;);this.colorKey=e,Ut[e]=this}getContext(){return y.warn("shape.getContext() method is deprecated. Please don not use it."),this.getLayer().getContext()}getCanvas(){return y.warn("shape.getCanvas() method is deprecated. Please don not use it."),this.getLayer().getCanvas()}getSceneFunc(){return this.attrs.sceneFunc||this._sceneFunc}getHitFunc(){return this.attrs.hitFunc||this._hitFunc}hasShadow(){return this._getCache(Bt,this._hasShadow)}_hasShadow(){return this.shadowEnabled()&&0!==this.shadowOpacity()&&!!(this.shadowColor()||this.shadowBlur()||this.shadowOffsetX()||this.shadowOffsetY())}_getFillPattern(){return this._getCache(Ht,this.__getFillPattern)}__getFillPattern(){if(this.fillPatternImage()){const t=Xt().createPattern(this.fillPatternImage(),this.fillPatternRepeat()||"repeat");if(t&&t.setTransform){const e=new c;e.translate(this.fillPatternX(),this.fillPatternX()),e.rotate(l.getAngle(this.fillPatternRotation())),e.scale(this.fillPatternScaleX(),this.fillPatternScaleY()),e.translate(-1*this.fillPatternOffsetX(),-1*this.fillPatternOffsetY());const i=e.getMatrix();t.setTransform({a:i[0],b:i[1],c:i[2],d:i[3],e:i[4],f:i[5]})}return t}}_getLinearGradient(){return this._getCache(zt,this.__getLinearGradient)}__getLinearGradient(){var t=this.fillLinearGradientColorStops();if(t){for(var e=Xt(),i=this.fillLinearGradientStartPoint(),r=this.fillLinearGradientEndPoint(),a=e.createLinearGradient(i.x,i.y,r.x,r.y),n=0;n<t.length;n+=2)a.addColorStop(t[n],t[n+1]);return a}}_getRadialGradient(){return this._getCache(qt,this.__getRadialGradient)}__getRadialGradient(){var t=this.fillRadialGradientColorStops();if(t){for(var e=Xt(),i=this.fillRadialGradientStartPoint(),r=this.fillRadialGradientEndPoint(),a=e.createRadialGradient(i.x,i.y,this.fillRadialGradientStartRadius(),r.x,r.y,this.fillRadialGradientEndRadius()),n=0;n<t.length;n+=2)a.addColorStop(t[n],t[n+1]);return a}}getShadowRGBA(){return this._getCache(Wt,this._getShadowRGBA)}_getShadowRGBA(){if(this.hasShadow()){var t=y.colorToRGBA(this.shadowColor());return"rgba("+t.r+","+t.g+","+t.b+","+t.a*(this.shadowOpacity()||1)+")"}}hasFill(){return this._calculate("hasFill",["fillEnabled","fill","fillPatternImage","fillLinearGradientColorStops","fillRadialGradientColorStops"],(()=>this.fillEnabled()&&!!(this.fill()||this.fillPatternImage()||this.fillLinearGradientColorStops()||this.fillRadialGradientColorStops())))}hasStroke(){return this._calculate("hasStroke",["strokeEnabled","strokeWidth","stroke","strokeLinearGradientColorStops"],(()=>this.strokeEnabled()&&this.strokeWidth()&&!(!this.stroke()&&!this.strokeLinearGradientColorStops())))}hasHitStroke(){const t=this.hitStrokeWidth();return"auto"===t?this.hasStroke():this.strokeEnabled()&&!!t}intersects(t){var e=this.getStage().bufferHitCanvas;return e.getContext().clear(),this.drawHit(e,null,!0),e.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0}destroy(){return it.prototype.destroy.call(this),delete Ut[this.colorKey],delete this.colorKey,this}_useBufferCanvas(t){var e;if(!this.getStage())return!1;if(null!==(e=this.attrs.perfectDrawEnabled)&&void 0!==e&&!e)return!1;const i=t||this.hasFill(),r=this.hasStroke(),a=1!==this.getAbsoluteOpacity();if(i&&r&&a)return!0;const n=this.hasShadow(),s=this.shadowForStrokeEnabled();return!!(i&&r&&n&&s)}setStrokeHitEnabled(t){y.warn("strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead."),t?this.hitStrokeWidth("auto"):this.hitStrokeWidth(0)}getStrokeHitEnabled(){return 0!==this.hitStrokeWidth()}getSelfRect(){var t=this.size();return{x:this._centroid?-t.width/2:0,y:this._centroid?-t.height/2:0,width:t.width,height:t.height}}getClientRect(t={}){const e=t.skipTransform,i=t.relativeTo,r=this.getSelfRect(),a=!t.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,n=r.width+a,s=r.height+a,o=!t.skipShadow&&this.hasShadow(),h=o?this.shadowOffsetX():0,l=o?this.shadowOffsetY():0,d=n+Math.abs(h),c=s+Math.abs(l),g=o&&this.shadowBlur()||0,u=d+2*g,f=c+2*g;let p=0;Math.round(a/2)!==a/2&&(p=1);const v={width:u+p,height:f+p,x:-Math.round(a/2+g)+Math.min(h,0)+r.x,y:-Math.round(a/2+g)+Math.min(l,0)+r.y};return e?v:this._transformedRect(v,i)}drawScene(t,e){var i,r,a=this.getLayer(),n=t||a.getCanvas(),s=n.getContext(),o=this._getCanvasCache(),h=this.getSceneFunc(),l=this.hasShadow(),d=n.isCache,c=e===this;if(!this.isVisible()&&!c)return this;if(o){s.save();var g=this.getAbsoluteTransform(e).getMatrix();return s.transform(g[0],g[1],g[2],g[3],g[4],g[5]),this._drawCachedSceneCanvas(s),s.restore(),this}if(!h)return this;if(s.save(),this._useBufferCanvas()&&!d){(r=(i=this.getStage().bufferCanvas).getContext()).clear(),r.save(),r._applyLineJoin(this);var u=this.getAbsoluteTransform(e).getMatrix();r.transform(u[0],u[1],u[2],u[3],u[4],u[5]),h.call(this,r,this),r.restore();var f=i.pixelRatio;l&&s._applyShadow(this),s._applyOpacity(this),s._applyGlobalCompositeOperation(this),s.drawImage(i._canvas,0,0,i.width/f,i.height/f)}else s._applyLineJoin(this),c||(u=this.getAbsoluteTransform(e).getMatrix(),s.transform(u[0],u[1],u[2],u[3],u[4],u[5]),s._applyOpacity(this),s._applyGlobalCompositeOperation(this)),l&&s._applyShadow(this),h.call(this,s,this);return s.restore(),this}drawHit(t,e,i=!1){if(!this.shouldDrawHit(e,i))return this;var r=this.getLayer(),a=t||r.hitCanvas,n=a&&a.getContext(),s=this.hitFunc()||this.sceneFunc(),o=this._getCanvasCache(),h=o&&o.hit;if(this.colorKey||y.warn("Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. If you want to reuse shape you should call remove() instead of destroy()"),h){n.save();var l=this.getAbsoluteTransform(e).getMatrix();return n.transform(l[0],l[1],l[2],l[3],l[4],l[5]),this._drawCachedHitCanvas(n),n.restore(),this}if(!s)return this;if(n.save(),n._applyLineJoin(this),this!==e){var d=this.getAbsoluteTransform(e).getMatrix();n.transform(d[0],d[1],d[2],d[3],d[4],d[5])}return s.call(this,n,this),n.restore(),this}drawHitFromCache(t=0){var e,i,r,a,n,s=this._getCanvasCache(),o=this._getCachedSceneCanvas(),h=s.hit,l=h.getContext(),d=h.getWidth(),c=h.getHeight();l.clear(),l.drawImage(o._canvas,0,0,d,c);try{for(r=(i=(e=l.getImageData(0,0,d,c)).data).length,a=y._hexToRgb(this.colorKey),n=0;n<r;n+=4)i[n+3]>t?(i[n]=a.r,i[n+1]=a.g,i[n+2]=a.b,i[n+3]=255):i[n+3]=0;l.putImageData(e,0,0)}catch(t){y.error("Unable to draw hit graph from cached scene canvas. "+t.message)}return this}hasPointerCapture(t){return lt(t,this)}setPointerCapture(t){dt(t,this)}releaseCapture(t){ct(t)}}jt.prototype._fillFunc=function(t){t.fill()},jt.prototype._strokeFunc=function(t){t.stroke()},jt.prototype._fillFuncHit=function(t){t.fill()},jt.prototype._strokeFuncHit=function(t){t.stroke()},jt.prototype._centroid=!1,jt.prototype.nodeType="Shape",d(jt),jt.prototype.eventListeners={},jt.prototype.on.call(jt.prototype,"shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(Bt)})),jt.prototype.on.call(jt.prototype,"shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",(function(){this._clearCache(Wt)})),jt.prototype.on.call(jt.prototype,"fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva fillPatternOffsetX.konva fillPatternOffsetY.konva fillPatternRotation.konva",(function(){this._clearCache(Ht)})),jt.prototype.on.call(jt.prototype,"fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva",(function(){this._clearCache(zt)})),jt.prototype.on.call(jt.prototype,"fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva",(function(){this._clearCache(qt)})),G.addGetterSetter(jt,"stroke",void 0,k()),G.addGetterSetter(jt,"strokeWidth",2,w()),G.addGetterSetter(jt,"fillAfterStrokeEnabled",!1),G.addGetterSetter(jt,"hitStrokeWidth","auto",C()),G.addGetterSetter(jt,"strokeHitEnabled",!0,T()),G.addGetterSetter(jt,"perfectDrawEnabled",!0,T()),G.addGetterSetter(jt,"shadowForStrokeEnabled",!0,T()),G.addGetterSetter(jt,"lineJoin"),G.addGetterSetter(jt,"lineCap"),G.addGetterSetter(jt,"sceneFunc"),G.addGetterSetter(jt,"hitFunc"),G.addGetterSetter(jt,"dash"),G.addGetterSetter(jt,"dashOffset",0,w()),G.addGetterSetter(jt,"shadowColor",void 0,P()),G.addGetterSetter(jt,"shadowBlur",0,w()),G.addGetterSetter(jt,"shadowOpacity",1,w()),G.addComponentsGetterSetter(jt,"shadowOffset",["x","y"]),G.addGetterSetter(jt,"shadowOffsetX",0,w()),G.addGetterSetter(jt,"shadowOffsetY",0,w()),G.addGetterSetter(jt,"fillPatternImage"),G.addGetterSetter(jt,"fill",void 0,k()),G.addGetterSetter(jt,"fillPatternX",0,w()),G.addGetterSetter(jt,"fillPatternY",0,w()),G.addGetterSetter(jt,"fillLinearGradientColorStops"),G.addGetterSetter(jt,"strokeLinearGradientColorStops"),G.addGetterSetter(jt,"fillRadialGradientStartRadius",0),G.addGetterSetter(jt,"fillRadialGradientEndRadius",0),G.addGetterSetter(jt,"fillRadialGradientColorStops"),G.addGetterSetter(jt,"fillPatternRepeat","repeat"),G.addGetterSetter(jt,"fillEnabled",!0),G.addGetterSetter(jt,"strokeEnabled",!0),G.addGetterSetter(jt,"shadowEnabled",!0),G.addGetterSetter(jt,"dashEnabled",!0),G.addGetterSetter(jt,"strokeScaleEnabled",!0),G.addGetterSetter(jt,"fillPriority","color"),G.addComponentsGetterSetter(jt,"fillPatternOffset",["x","y"]),G.addGetterSetter(jt,"fillPatternOffsetX",0,w()),G.addGetterSetter(jt,"fillPatternOffsetY",0,w()),G.addComponentsGetterSetter(jt,"fillPatternScale",["x","y"]),G.addGetterSetter(jt,"fillPatternScaleX",1,w()),G.addGetterSetter(jt,"fillPatternScaleY",1,w()),G.addComponentsGetterSetter(jt,"fillLinearGradientStartPoint",["x","y"]),G.addComponentsGetterSetter(jt,"strokeLinearGradientStartPoint",["x","y"]),G.addGetterSetter(jt,"fillLinearGradientStartPointX",0),G.addGetterSetter(jt,"strokeLinearGradientStartPointX",0),G.addGetterSetter(jt,"fillLinearGradientStartPointY",0),G.addGetterSetter(jt,"strokeLinearGradientStartPointY",0),G.addComponentsGetterSetter(jt,"fillLinearGradientEndPoint",["x","y"]),G.addComponentsGetterSetter(jt,"strokeLinearGradientEndPoint",["x","y"]),G.addGetterSetter(jt,"fillLinearGradientEndPointX",0),G.addGetterSetter(jt,"strokeLinearGradientEndPointX",0),G.addGetterSetter(jt,"fillLinearGradientEndPointY",0),G.addGetterSetter(jt,"strokeLinearGradientEndPointY",0),G.addComponentsGetterSetter(jt,"fillRadialGradientStartPoint",["x","y"]),G.addGetterSetter(jt,"fillRadialGradientStartPointX",0),G.addGetterSetter(jt,"fillRadialGradientStartPointY",0),G.addComponentsGetterSetter(jt,"fillRadialGradientEndPoint",["x","y"]),G.addGetterSetter(jt,"fillRadialGradientEndPointX",0),G.addGetterSetter(jt,"fillRadialGradientEndPointY",0),G.addGetterSetter(jt,"fillPatternRotation",0),G.backCompat(jt,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"});var Qt=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],Vt=Qt.length;class Kt extends at{constructor(t){super(t),this.canvas=new N,this.hitCanvas=new B({pixelRatio:1}),this._waitingForDraw=!1,this.on("visibleChange.konva",this._checkVisibility),this._checkVisibility(),this.on("imageSmoothingEnabledChange.konva",this._setSmoothEnabled),this._setSmoothEnabled()}createPNGStream(){return this.canvas._canvas.createPNGStream()}getCanvas(){return this.canvas}getNativeCanvasElement(){return this.canvas._canvas}getHitCanvas(){return this.hitCanvas}getContext(){return this.getCanvas().getContext()}clear(t){return this.getContext().clear(t),this.getHitCanvas().getContext().clear(t),this}setZIndex(t){super.setZIndex(t);var e=this.getStage();return e&&e.content&&(e.content.removeChild(this.getNativeCanvasElement()),t<e.children.length-1?e.content.insertBefore(this.getNativeCanvasElement(),e.children[t+1].getCanvas()._canvas):e.content.appendChild(this.getNativeCanvasElement())),this}moveToTop(){it.prototype.moveToTop.call(this);var t=this.getStage();return t&&t.content&&(t.content.removeChild(this.getNativeCanvasElement()),t.content.appendChild(this.getNativeCanvasElement())),!0}moveUp(){if(!it.prototype.moveUp.call(this))return!1;var t=this.getStage();return!(!t||!t.content||(t.content.removeChild(this.getNativeCanvasElement()),this.index<t.children.length-1?t.content.insertBefore(this.getNativeCanvasElement(),t.children[this.index+1].getCanvas()._canvas):t.content.appendChild(this.getNativeCanvasElement()),0))}moveDown(){if(it.prototype.moveDown.call(this)){var t=this.getStage();if(t){var e=t.children;t.content&&(t.content.removeChild(this.getNativeCanvasElement()),t.content.insertBefore(this.getNativeCanvasElement(),e[this.index+1].getCanvas()._canvas))}return!0}return!1}moveToBottom(){if(it.prototype.moveToBottom.call(this)){var t=this.getStage();if(t){var e=t.children;t.content&&(t.content.removeChild(this.getNativeCanvasElement()),t.content.insertBefore(this.getNativeCanvasElement(),e[1].getCanvas()._canvas))}return!0}return!1}getLayer(){return this}remove(){var t=this.getNativeCanvasElement();return it.prototype.remove.call(this),t&&t.parentNode&&y._isInDocument(t)&&t.parentNode.removeChild(t),this}getStage(){return this.parent}setSize({width:t,height:e}){return this.canvas.setSize(t,e),this.hitCanvas.setSize(t,e),this._setSmoothEnabled(),this}_validateAdd(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&y.throw("You may only add groups and shapes to a layer.")}_toKonvaCanvas(t){return(t=t||{}).width=t.width||this.getWidth(),t.height=t.height||this.getHeight(),t.x=void 0!==t.x?t.x:this.x(),t.y=void 0!==t.y?t.y:this.y(),it.prototype._toKonvaCanvas.call(this,t)}_checkVisibility(){const t=this.visible();this.canvas._canvas.style.display=t?"block":"none"}_setSmoothEnabled(){this.getContext()._context.imageSmoothingEnabled=this.imageSmoothingEnabled()}getWidth(){if(this.parent)return this.parent.width()}setWidth(){y.warn('Can not change width of layer. Use "stage.width(value)" function instead.')}getHeight(){if(this.parent)return this.parent.height()}setHeight(){y.warn('Can not change height of layer. Use "stage.height(value)" function instead.')}batchDraw(){return this._waitingForDraw||(this._waitingForDraw=!0,y.requestAnimFrame((()=>{this.draw(),this._waitingForDraw=!1}))),this}getIntersection(t){if(!this.isListening()||!this.isVisible())return null;for(var e=1,i=!1;;){for(let r=0;r<Vt;r++){const a=Qt[r],n=this._getIntersection({x:t.x+a.x*e,y:t.y+a.y*e}),s=n.shape;if(s)return s;if(i=!!n.antialiased,!n.antialiased)break}if(!i)return null;e+=1}}_getIntersection(t){const e=this.hitCanvas.pixelRatio,i=this.hitCanvas.context.getImageData(Math.round(t.x*e),Math.round(t.y*e),1,1).data,r=i[3];if(255===r){const t=y._rgbToHex(i[0],i[1],i[2]),e=Ut["#"+t];return e?{shape:e}:{antialiased:!0}}return r>0?{antialiased:!0}:{}}drawScene(t,e){var i=this.getLayer(),r=t||i&&i.getCanvas();return this._fire("beforeDraw",{node:this}),this.clearBeforeDraw()&&r.getContext().clear(),at.prototype.drawScene.call(this,r,e),this._fire("draw",{node:this}),this}drawHit(t,e){var i=this.getLayer(),r=t||i&&i.hitCanvas;return i&&i.clearBeforeDraw()&&i.getHitCanvas().getContext().clear(),at.prototype.drawHit.call(this,r,e),this}enableHitGraph(){return this.hitGraphEnabled(!0),this}disableHitGraph(){return this.hitGraphEnabled(!1),this}setHitGraphEnabled(t){y.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening(t)}getHitGraphEnabled(t){return y.warn("hitGraphEnabled method is deprecated. Please use layer.listening() instead."),this.listening()}toggleHitCanvas(){if(this.parent&&this.parent.content){var t=this.parent;this.hitCanvas._canvas.parentNode?t.content.removeChild(this.hitCanvas._canvas):t.content.appendChild(this.hitCanvas._canvas)}}}Kt.prototype.nodeType="Layer",d(Kt),G.addGetterSetter(Kt,"imageSmoothingEnabled",!0),G.addGetterSetter(Kt,"clearBeforeDraw",!0),G.addGetterSetter(Kt,"hitGraphEnabled",!0,T());class Jt extends Kt{constructor(t){super(t),this.listening(!1),y.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.')}}Jt.prototype.nodeType="FastLayer",d(Jt);class $t extends at{_validateAdd(t){var e=t.getType();"Group"!==e&&"Shape"!==e&&y.throw("You may only add groups and shapes to groups.")}}$t.prototype.nodeType="Group",d($t);var Zt=h.performance&&h.performance.now?function(){return h.performance.now()}:function(){return(new Date).getTime()};class te{constructor(t,e){this.id=te.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:Zt(),frameRate:0},this.func=t,this.setLayers(e)}setLayers(t){var e;return e=t?t.length>0?t:[t]:[],this.layers=e,this}getLayers(){return this.layers}addLayer(t){var e,i=this.layers,r=i.length;for(e=0;e<r;e++)if(i[e]._id===t._id)return!1;return this.layers.push(t),!0}isRunning(){var t,e=te.animations,i=e.length;for(t=0;t<i;t++)if(e[t].id===this.id)return!0;return!1}start(){return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=Zt(),te._addAnimation(this),this}stop(){return te._removeAnimation(this),this}_updateFrameObject(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}static _addAnimation(t){this.animations.push(t),this._handleAnimation()}static _removeAnimation(t){var e,i=t.id,r=this.animations,a=r.length;for(e=0;e<a;e++)if(r[e].id===i){this.animations.splice(e,1);break}}static _runFrames(){var t,e,i,r,a,n,s,o,h={},l=this.animations;for(r=0;r<l.length;r++)if(e=(t=l[r]).layers,i=t.func,t._updateFrameObject(Zt()),n=e.length,!i||!1!==i.call(t,t.frame))for(a=0;a<n;a++)void 0!==(s=e[a])._id&&(h[s._id]=s);for(o in h)h.hasOwnProperty(o)&&h[o].batchDraw()}static _animationLoop(){var t=te;t.animations.length?(t._runFrames(),y.requestAnimFrame(t._animationLoop)):t.animRunning=!1}static _handleAnimation(){this.animRunning||(this.animRunning=!0,y.requestAnimFrame(this._animationLoop))}}te.animations=[],te.animIdCounter=0,te.animRunning=!1;var ee={node:1,duration:1,easing:1,onFinish:1,yoyo:1},ie=0,re=["fill","stroke","shadowColor"];class ae{constructor(t,e,i,r,a,n,s){this.prop=t,this.propFunc=e,this.begin=r,this._pos=r,this.duration=n,this._change=0,this.prevPos=0,this.yoyo=s,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=i,this._change=a-this.begin,this.pause()}fire(t){var e=this[t];e&&e()}setTime(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())}getTime(){return this._time}setPosition(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t}getPosition(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)}play(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")}reverse(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")}seek(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")}reset(){this.pause(),this._time=0,this.update(),this.fire("onReset")}finish(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")}update(){this.setPosition(this.getPosition(this._time)),this.fire("onUpdate")}onEnterFrame(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)}pause(){this.state=1,this.fire("onPause")}getTimer(){return(new Date).getTime()}}class ne{constructor(t){var e,i,r=this,a=t.node,n=a._id,s=t.easing||se.Linear,o=!!t.yoyo;e=void 0===t.duration?.3:0===t.duration?.001:t.duration,this.node=a,this._id=ie++;var h=a.getLayer()||(a instanceof l.Stage?a.getLayers():null);for(i in h||y.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new te((function(){r.tween.onEnterFrame()}),h),this.tween=new ae(i,(function(t){r._tweenFunc(t)}),s,0,1,1e3*e,o),this._addListeners(),ne.attrs[n]||(ne.attrs[n]={}),ne.attrs[n][this._id]||(ne.attrs[n][this._id]={}),ne.tweens[n]||(ne.tweens[n]={}),t)void 0===ee[i]&&this._addAttr(i,t[i]);this.reset(),this.onFinish=t.onFinish,this.onReset=t.onReset,this.onUpdate=t.onUpdate}_addAttr(t,e){var i,r,a,n,s,o,h,l,d=this.node,c=d._id;if((a=ne.tweens[c][t])&&delete ne.attrs[c][a][t],i=d.getAttr(t),y._isArray(e))if(r=[],s=Math.max(e.length,i.length),"points"===t&&e.length!==i.length&&(e.length>i.length?(h=i,i=y._prepareArrayForTween(i,e,d.closed())):(o=e,e=y._prepareArrayForTween(e,i,d.closed()))),0===t.indexOf("fill"))for(n=0;n<s;n++)if(n%2==0)r.push(e[n]-i[n]);else{var g=y.colorToRGBA(i[n]);l=y.colorToRGBA(e[n]),i[n]=g,r.push({r:l.r-g.r,g:l.g-g.g,b:l.b-g.b,a:l.a-g.a})}else for(n=0;n<s;n++)r.push(e[n]-i[n]);else-1!==re.indexOf(t)?(i=y.colorToRGBA(i),r={r:(l=y.colorToRGBA(e)).r-i.r,g:l.g-i.g,b:l.b-i.b,a:l.a-i.a}):r=e-i;ne.attrs[c][this._id][t]={start:i,diff:r,end:e,trueEnd:o,trueStart:h},ne.tweens[c][t]=this._id}_tweenFunc(t){var e,i,r,a,n,s,o,h,l=this.node,d=ne.attrs[l._id][this._id];for(e in d){if(r=(i=d[e]).start,a=i.diff,h=i.end,y._isArray(r))if(n=[],o=Math.max(r.length,h.length),0===e.indexOf("fill"))for(s=0;s<o;s++)s%2==0?n.push((r[s]||0)+a[s]*t):n.push("rgba("+Math.round(r[s].r+a[s].r*t)+","+Math.round(r[s].g+a[s].g*t)+","+Math.round(r[s].b+a[s].b*t)+","+(r[s].a+a[s].a*t)+")");else for(s=0;s<o;s++)n.push((r[s]||0)+a[s]*t);else n=-1!==re.indexOf(e)?"rgba("+Math.round(r.r+a.r*t)+","+Math.round(r.g+a.g*t)+","+Math.round(r.b+a.b*t)+","+(r.a+a.a*t)+")":r+a*t;l.setAttr(e,n)}}_addListeners(){this.tween.onPlay=()=>{this.anim.start()},this.tween.onReverse=()=>{this.anim.start()},this.tween.onPause=()=>{this.anim.stop()},this.tween.onFinish=()=>{var t=this.node,e=ne.attrs[t._id][this._id];e.points&&e.points.trueEnd&&t.setAttr("points",e.points.trueEnd),this.onFinish&&this.onFinish.call(this)},this.tween.onReset=()=>{var t=this.node,e=ne.attrs[t._id][this._id];e.points&&e.points.trueStart&&t.points(e.points.trueStart),this.onReset&&this.onReset()},this.tween.onUpdate=()=>{this.onUpdate&&this.onUpdate.call(this)}}play(){return this.tween.play(),this}reverse(){return this.tween.reverse(),this}reset(){return this.tween.reset(),this}seek(t){return this.tween.seek(1e3*t),this}pause(){return this.tween.pause(),this}finish(){return this.tween.finish(),this}destroy(){var t,e=this.node._id,i=this._id,r=ne.tweens[e];for(t in this.pause(),r)delete ne.tweens[e][t];delete ne.attrs[e][i]}}ne.attrs={},ne.tweens={},it.prototype.to=function(t){var e=t.onFinish;t.node=this,t.onFinish=function(){this.destroy(),e&&e()},new ne(t).play()};const se={BackEaseIn(t,e,i,r){var a=1.70158;return i*(t/=r)*t*((a+1)*t-a)+e},BackEaseOut(t,e,i,r){var a=1.70158;return i*((t=t/r-1)*t*((a+1)*t+a)+1)+e},BackEaseInOut(t,e,i,r){var a=1.70158;return(t/=r/2)<1?i/2*(t*t*((1+(a*=1.525))*t-a))+e:i/2*((t-=2)*t*((1+(a*=1.525))*t+a)+2)+e},ElasticEaseIn(t,e,i,r,a,n){var s=0;return 0===t?e:1==(t/=r)?e+i:(n||(n=.3*r),!a||a<Math.abs(i)?(a=i,s=n/4):s=n/(2*Math.PI)*Math.asin(i/a),-a*Math.pow(2,10*(t-=1))*Math.sin((t*r-s)*(2*Math.PI)/n)+e)},ElasticEaseOut(t,e,i,r,a,n){var s=0;return 0===t?e:1==(t/=r)?e+i:(n||(n=.3*r),!a||a<Math.abs(i)?(a=i,s=n/4):s=n/(2*Math.PI)*Math.asin(i/a),a*Math.pow(2,-10*t)*Math.sin((t*r-s)*(2*Math.PI)/n)+i+e)},ElasticEaseInOut(t,e,i,r,a,n){var s=0;return 0===t?e:2==(t/=r/2)?e+i:(n||(n=r*(.3*1.5)),!a||a<Math.abs(i)?(a=i,s=n/4):s=n/(2*Math.PI)*Math.asin(i/a),t<1?a*Math.pow(2,10*(t-=1))*Math.sin((t*r-s)*(2*Math.PI)/n)*-.5+e:a*Math.pow(2,-10*(t-=1))*Math.sin((t*r-s)*(2*Math.PI)/n)*.5+i+e)},BounceEaseOut:(t,e,i,r)=>(t/=r)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e,BounceEaseIn:(t,e,i,r)=>i-se.BounceEaseOut(r-t,0,i,r)+e,BounceEaseInOut:(t,e,i,r)=>t<r/2?.5*se.BounceEaseIn(2*t,0,i,r)+e:.5*se.BounceEaseOut(2*t-r,0,i,r)+.5*i+e,EaseIn:(t,e,i,r)=>i*(t/=r)*t+e,EaseOut:(t,e,i,r)=>-i*(t/=r)*(t-2)+e,EaseInOut:(t,e,i,r)=>(t/=r/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e,StrongEaseIn:(t,e,i,r)=>i*(t/=r)*t*t*t*t+e,StrongEaseOut:(t,e,i,r)=>i*((t=t/r-1)*t*t*t*t+1)+e,StrongEaseInOut:(t,e,i,r)=>(t/=r/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e,Linear:(t,e,i,r)=>i*t/r+e},oe=y._assign(l,{Util:y,Transform:c,Node:it,Container:at,Stage:Nt,stages:Ft,Layer:Kt,FastLayer:Jt,Group:$t,DD:W,Shape:jt,shapes:Ut,Animation:te,Tween:ne,Easings:se,Context:D,Canvas:F});class he extends jt{_sceneFunc(t){var e=l.getAngle(this.angle()),i=this.clockwise();t.beginPath(),t.arc(0,0,this.outerRadius(),0,e,i),t.arc(0,0,this.innerRadius(),e,0,!i),t.closePath(),t.fillStrokeShape(this)}getWidth(){return 2*this.outerRadius()}getHeight(){return 2*this.outerRadius()}setWidth(t){this.outerRadius(t/2)}setHeight(t){this.outerRadius(t/2)}}function le(t,e,i,r,a,n,s){var o=Math.sqrt(Math.pow(i-t,2)+Math.pow(r-e,2)),h=Math.sqrt(Math.pow(a-i,2)+Math.pow(n-r,2)),l=s*o/(o+h),d=s*h/(o+h);return[i-l*(a-t),r-l*(n-e),i+d*(a-t),r+d*(n-e)]}function de(t,e){var i,r,a=t.length,n=[];for(i=2;i<a-2;i+=2)r=le(t[i-2],t[i-1],t[i],t[i+1],t[i+2],t[i+3],e),isNaN(r[0])||(n.push(r[0]),n.push(r[1]),n.push(t[i]),n.push(t[i+1]),n.push(r[2]),n.push(r[3]));return n}he.prototype._centroid=!0,he.prototype.className="Arc",he.prototype._attrsAffectingSize=["innerRadius","outerRadius"],d(he),G.addGetterSetter(he,"innerRadius",0,w()),G.addGetterSetter(he,"outerRadius",0,w()),G.addGetterSetter(he,"angle",0,w()),G.addGetterSetter(he,"clockwise",!1,T());class ce extends jt{constructor(t){super(t),this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",(function(){this._clearCache("tensionPoints")}))}_sceneFunc(t){var e,i,r,a=this.points(),n=a.length,s=this.tension(),o=this.closed(),h=this.bezier();if(n){if(t.beginPath(),t.moveTo(a[0],a[1]),0!==s&&n>4){for(i=(e=this.getTensionPoints()).length,r=o?0:4,o||t.quadraticCurveTo(e[0],e[1],e[2],e[3]);r<i-2;)t.bezierCurveTo(e[r++],e[r++],e[r++],e[r++],e[r++],e[r++]);o||t.quadraticCurveTo(e[i-2],e[i-1],a[n-2],a[n-1])}else if(h)for(r=2;r<n;)t.bezierCurveTo(a[r++],a[r++],a[r++],a[r++],a[r++],a[r++]);else for(r=2;r<n;r+=2)t.lineTo(a[r],a[r+1]);o?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}}getTensionPoints(){return this._getCache("tensionPoints",this._getTensionPoints)}_getTensionPoints(){return this.closed()?this._getTensionPointsClosed():de(this.points(),this.tension())}_getTensionPointsClosed(){var t=this.points(),e=t.length,i=this.tension(),r=le(t[e-2],t[e-1],t[0],t[1],t[2],t[3],i),a=le(t[e-4],t[e-3],t[e-2],t[e-1],t[0],t[1],i),n=de(t,i);return[r[2],r[3]].concat(n).concat([a[0],a[1],t[e-2],t[e-1],a[2],a[3],r[0],r[1],t[0],t[1]])}getWidth(){return this.getSelfRect().width}getHeight(){return this.getSelfRect().height}getSelfRect(){var t=this.points();if(t.length<4)return{x:t[0]||0,y:t[1]||0,width:0,height:0};for(var e,i,r=(t=0!==this.tension()?[t[0],t[1],...this._getTensionPoints(),t[t.length-2],t[t.length-1]]:this.points())[0],a=t[0],n=t[1],s=t[1],o=0;o<t.length/2;o++)e=t[2*o],i=t[2*o+1],r=Math.min(r,e),a=Math.max(a,e),n=Math.min(n,i),s=Math.max(s,i);return{x:r,y:n,width:a-r,height:s-n}}}ce.prototype.className="Line",ce.prototype._attrsAffectingSize=["points","bezier","tension"],d(ce),G.addGetterSetter(ce,"closed",!1),G.addGetterSetter(ce,"bezier",!1),G.addGetterSetter(ce,"tension",0,w()),G.addGetterSetter(ce,"points",[],function(){if(l.isUnminified)return function(t,e){return y._isArray(t)?t.forEach((function(t){y._isNumber(t)||y.warn('"'+e+'" attribute has non numeric element '+t+". Make sure that all elements are numbers.")})):y.warn(x(t)+' is a not valid value for "'+e+'" attribute. The value should be a array of numbers.'),t}}());class ge extends jt{constructor(t){super(t),this.dataArray=[],this.pathLength=0,this.dataArray=ge.parsePathData(this.data()),this.pathLength=0;for(var e=0;e<this.dataArray.length;++e)this.pathLength+=this.dataArray[e].pathLength;this.on("dataChange.konva",(function(){this.dataArray=ge.parsePathData(this.data()),this.pathLength=0;for(var t=0;t<this.dataArray.length;++t)this.pathLength+=this.dataArray[t].pathLength}))}_sceneFunc(t){var e=this.dataArray;t.beginPath();for(var i=!1,r=0;r<e.length;r++){var a=e[r].command,n=e[r].points;switch(a){case"L":t.lineTo(n[0],n[1]);break;case"M":t.moveTo(n[0],n[1]);break;case"C":t.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5]);break;case"Q":t.quadraticCurveTo(n[0],n[1],n[2],n[3]);break;case"A":var s=n[0],o=n[1],h=n[2],l=n[3],d=n[4],c=n[5],g=n[6],u=n[7],f=h>l?h:l,p=h>l?1:h/l,v=h>l?l/h:1;t.translate(s,o),t.rotate(g),t.scale(p,v),t.arc(0,0,f,d,d+c,1-u),t.scale(1/p,1/v),t.rotate(-g),t.translate(-s,-o);break;case"z":i=!0,t.closePath()}}i||this.hasFill()?t.fillStrokeShape(this):t.strokeShape(this)}getSelfRect(){var t=[];this.dataArray.forEach((function(e){if("A"===e.command){var i=e.points[4],r=e.points[5],a=e.points[4]+r,n=Math.PI/180;if(Math.abs(i-a)<n&&(n=Math.abs(i-a)),r<0)for(let r=i-n;r>a;r-=n){const i=ge.getPointOnEllipticalArc(e.points[0],e.points[1],e.points[2],e.points[3],r,0);t.push(i.x,i.y)}else for(let r=i+n;r<a;r+=n){const i=ge.getPointOnEllipticalArc(e.points[0],e.points[1],e.points[2],e.points[3],r,0);t.push(i.x,i.y)}}else if("C"===e.command)for(let i=0;i<=1;i+=.01){const r=ge.getPointOnCubicBezier(i,e.start.x,e.start.y,e.points[0],e.points[1],e.points[2],e.points[3],e.points[4],e.points[5]);t.push(r.x,r.y)}else t=t.concat(e.points)}));for(var e,i,r=t[0],a=t[0],n=t[1],s=t[1],o=0;o<t.length/2;o++)e=t[2*o],i=t[2*o+1],isNaN(e)||(r=Math.min(r,e),a=Math.max(a,e)),isNaN(i)||(n=Math.min(n,i),s=Math.max(s,i));return{x:Math.round(r),y:Math.round(n),width:Math.round(a-r),height:Math.round(s-n)}}getLength(){return this.pathLength}getPointAtLength(t){var e,i=0,r=this.dataArray.length;if(!r)return null;for(;i<r&&t>this.dataArray[i].pathLength;)t-=this.dataArray[i].pathLength,++i;if(i===r)return{x:(e=this.dataArray[i-1].points.slice(-2))[0],y:e[1]};if(t<.01)return{x:(e=this.dataArray[i].points.slice(0,2))[0],y:e[1]};var a=this.dataArray[i],n=a.points;switch(a.command){case"L":return ge.getPointOnLine(t,a.start.x,a.start.y,n[0],n[1]);case"C":return ge.getPointOnCubicBezier(t/a.pathLength,a.start.x,a.start.y,n[0],n[1],n[2],n[3],n[4],n[5]);case"Q":return ge.getPointOnQuadraticBezier(t/a.pathLength,a.start.x,a.start.y,n[0],n[1],n[2],n[3]);case"A":var s=n[0],o=n[1],h=n[2],l=n[3],d=n[4],c=n[5],g=n[6];return d+=c*t/a.pathLength,ge.getPointOnEllipticalArc(s,o,h,l,d,g)}return null}static getLineLength(t,e,i,r){return Math.sqrt((i-t)*(i-t)+(r-e)*(r-e))}static getPointOnLine(t,e,i,r,a,n,s){void 0===n&&(n=e),void 0===s&&(s=i);var o=(a-i)/(r-e+1e-8),h=Math.sqrt(t*t/(1+o*o));r<e&&(h*=-1);var l,d=o*h;if(r===e)l={x:n,y:s+d};else if((s-i)/(n-e+1e-8)===o)l={x:n+h,y:s+d};else{var c,g,u=this.getLineLength(e,i,r,a),f=(n-e)*(r-e)+(s-i)*(a-i);c=e+(f/=u*u)*(r-e),g=i+f*(a-i);var p=this.getLineLength(n,s,c,g),v=Math.sqrt(t*t-p*p);h=Math.sqrt(v*v/(1+o*o)),r<e&&(h*=-1),l={x:c+h,y:g+(d=o*h)}}return l}static getPointOnCubicBezier(t,e,i,r,a,n,s,o,h){function l(t){return t*t*t}function d(t){return 3*t*t*(1-t)}function c(t){return 3*t*(1-t)*(1-t)}function g(t){return(1-t)*(1-t)*(1-t)}return{x:o*l(t)+n*d(t)+r*c(t)+e*g(t),y:h*l(t)+s*d(t)+a*c(t)+i*g(t)}}static getPointOnQuadraticBezier(t,e,i,r,a,n,s){function o(t){return t*t}function h(t){return 2*t*(1-t)}function l(t){return(1-t)*(1-t)}return{x:n*o(t)+r*h(t)+e*l(t),y:s*o(t)+a*h(t)+i*l(t)}}static getPointOnEllipticalArc(t,e,i,r,a,n){var s=Math.cos(n),o=Math.sin(n),h=i*Math.cos(a),l=r*Math.sin(a);return{x:t+(h*s-l*o),y:e+(h*o+l*s)}}static parsePathData(t){if(!t)return[];var e=t,i=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];e=e.replace(new RegExp(" ","g"),",");for(var r=0;r<i.length;r++)e=e.replace(new RegExp(i[r],"g"),"|"+i[r]);var a,n=e.split("|"),s=[],o=[],h=0,l=0,d=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(r=1;r<n.length;r++){var c=n[r],g=c.charAt(0);for(c=c.slice(1),o.length=0;a=d.exec(c);)o.push(a[0]);for(var u=[],f=0,p=o.length;f<p;f++)if("00"!==o[f]){var v=parseFloat(o[f]);isNaN(v)?u.push(0):u.push(v)}else u.push(0,0);for(;u.length>0&&!isNaN(u[0]);){var m,_,y,x,b,w,S,C,P,k,T=null,A=[],M=h,G=l;switch(g){case"l":h+=u.shift(),l+=u.shift(),T="L",A.push(h,l);break;case"L":h=u.shift(),l=u.shift(),A.push(h,l);break;case"m":var L=u.shift(),E=u.shift();if(h+=L,l+=E,T="M",s.length>2&&"z"===s[s.length-1].command)for(var R=s.length-2;R>=0;R--)if("M"===s[R].command){h=s[R].points[0]+L,l=s[R].points[1]+E;break}A.push(h,l),g="l";break;case"M":h=u.shift(),l=u.shift(),T="M",A.push(h,l),g="L";break;case"h":h+=u.shift(),T="L",A.push(h,l);break;case"H":h=u.shift(),T="L",A.push(h,l);break;case"v":l+=u.shift(),T="L",A.push(h,l);break;case"V":l=u.shift(),T="L",A.push(h,l);break;case"C":A.push(u.shift(),u.shift(),u.shift(),u.shift()),h=u.shift(),l=u.shift(),A.push(h,l);break;case"c":A.push(h+u.shift(),l+u.shift(),h+u.shift(),l+u.shift()),h+=u.shift(),l+=u.shift(),T="C",A.push(h,l);break;case"S":_=h,y=l,"C"===(m=s[s.length-1]).command&&(_=h+(h-m.points[2]),y=l+(l-m.points[3])),A.push(_,y,u.shift(),u.shift()),h=u.shift(),l=u.shift(),T="C",A.push(h,l);break;case"s":_=h,y=l,"C"===(m=s[s.length-1]).command&&(_=h+(h-m.points[2]),y=l+(l-m.points[3])),A.push(_,y,h+u.shift(),l+u.shift()),h+=u.shift(),l+=u.shift(),T="C",A.push(h,l);break;case"Q":A.push(u.shift(),u.shift()),h=u.shift(),l=u.shift(),A.push(h,l);break;case"q":A.push(h+u.shift(),l+u.shift()),h+=u.shift(),l+=u.shift(),T="Q",A.push(h,l);break;case"T":_=h,y=l,"Q"===(m=s[s.length-1]).command&&(_=h+(h-m.points[0]),y=l+(l-m.points[1])),h=u.shift(),l=u.shift(),T="Q",A.push(_,y,h,l);break;case"t":_=h,y=l,"Q"===(m=s[s.length-1]).command&&(_=h+(h-m.points[0]),y=l+(l-m.points[1])),h+=u.shift(),l+=u.shift(),T="Q",A.push(_,y,h,l);break;case"A":x=u.shift(),b=u.shift(),w=u.shift(),S=u.shift(),C=u.shift(),P=h,k=l,h=u.shift(),l=u.shift(),T="A",A=this.convertEndpointToCenterParameterization(P,k,h,l,S,C,x,b,w);break;case"a":x=u.shift(),b=u.shift(),w=u.shift(),S=u.shift(),C=u.shift(),P=h,k=l,h+=u.shift(),l+=u.shift(),T="A",A=this.convertEndpointToCenterParameterization(P,k,h,l,S,C,x,b,w)}s.push({command:T||g,points:A,start:{x:M,y:G},pathLength:this.calcLength(M,G,T||g,A)})}"z"!==g&&"Z"!==g||s.push({command:"z",points:[],start:void 0,pathLength:0})}return s}static calcLength(t,e,i,r){var a,n,s,o,h=ge;switch(i){case"L":return h.getLineLength(t,e,r[0],r[1]);case"C":for(a=0,n=h.getPointOnCubicBezier(0,t,e,r[0],r[1],r[2],r[3],r[4],r[5]),o=.01;o<=1;o+=.01)s=h.getPointOnCubicBezier(o,t,e,r[0],r[1],r[2],r[3],r[4],r[5]),a+=h.getLineLength(n.x,n.y,s.x,s.y),n=s;return a;case"Q":for(a=0,n=h.getPointOnQuadraticBezier(0,t,e,r[0],r[1],r[2],r[3]),o=.01;o<=1;o+=.01)s=h.getPointOnQuadraticBezier(o,t,e,r[0],r[1],r[2],r[3]),a+=h.getLineLength(n.x,n.y,s.x,s.y),n=s;return a;case"A":a=0;var l=r[4],d=r[5],c=r[4]+d,g=Math.PI/180;if(Math.abs(l-c)<g&&(g=Math.abs(l-c)),n=h.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],l,0),d<0)for(o=l-g;o>c;o-=g)s=h.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],o,0),a+=h.getLineLength(n.x,n.y,s.x,s.y),n=s;else for(o=l+g;o<c;o+=g)s=h.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],o,0),a+=h.getLineLength(n.x,n.y,s.x,s.y),n=s;return s=h.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],c,0),a+h.getLineLength(n.x,n.y,s.x,s.y)}return 0}static convertEndpointToCenterParameterization(t,e,i,r,a,n,s,o,h){var l=h*(Math.PI/180),d=Math.cos(l)*(t-i)/2+Math.sin(l)*(e-r)/2,c=-1*Math.sin(l)*(t-i)/2+Math.cos(l)*(e-r)/2,g=d*d/(s*s)+c*c/(o*o);g>1&&(s*=Math.sqrt(g),o*=Math.sqrt(g));var u=Math.sqrt((s*s*(o*o)-s*s*(c*c)-o*o*(d*d))/(s*s*(c*c)+o*o*(d*d)));a===n&&(u*=-1),isNaN(u)&&(u=0);var f=u*s*c/o,p=u*-o*d/s,v=(t+i)/2+Math.cos(l)*f-Math.sin(l)*p,m=(e+r)/2+Math.sin(l)*f+Math.cos(l)*p,_=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},y=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(_(t)*_(e))},x=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(y(t,e))},b=x([1,0],[(d-f)/s,(c-p)/o]),w=[(d-f)/s,(c-p)/o],S=[(-1*d-f)/s,(-1*c-p)/o],C=x(w,S);return y(w,S)<=-1&&(C=Math.PI),y(w,S)>=1&&(C=0),0===n&&C>0&&(C-=2*Math.PI),1===n&&C<0&&(C+=2*Math.PI),[v,m,s,o,b,C,l,n]}}ge.prototype.className="Path",ge.prototype._attrsAffectingSize=["data"],d(ge),G.addGetterSetter(ge,"data");class ue extends ce{_sceneFunc(t){super._sceneFunc(t);var e=2*Math.PI,i=this.points(),r=i,a=0!==this.tension()&&i.length>4;a&&(r=this.getTensionPoints());var n,s,o=this.pointerLength(),h=i.length;if(a){const t=[r[r.length-4],r[r.length-3],r[r.length-2],r[r.length-1],i[h-2],i[h-1]],e=ge.calcLength(r[r.length-4],r[r.length-3],"C",t),a=ge.getPointOnQuadraticBezier(Math.min(1,1-o/e),t[0],t[1],t[2],t[3],t[4],t[5]);n=i[h-2]-a.x,s=i[h-1]-a.y}else n=i[h-2]-i[h-4],s=i[h-1]-i[h-3];var l=(Math.atan2(s,n)+e)%e,d=this.pointerWidth();this.pointerAtEnding()&&(t.save(),t.beginPath(),t.translate(i[h-2],i[h-1]),t.rotate(l),t.moveTo(0,0),t.lineTo(-o,d/2),t.lineTo(-o,-d/2),t.closePath(),t.restore()),this.pointerAtBeginning()&&(t.save(),t.translate(i[0],i[1]),a?(n=(r[0]+r[2])/2-i[0],s=(r[1]+r[3])/2-i[1]):(n=i[2]-i[0],s=i[3]-i[1]),t.rotate((Math.atan2(-s,-n)+e)%e),t.moveTo(0,0),t.lineTo(-o,d/2),t.lineTo(-o,-d/2),t.closePath(),t.restore());var c=this.dashEnabled();c&&(this.attrs.dashEnabled=!1,t.setLineDash([])),t.fillStrokeShape(this),c&&(this.attrs.dashEnabled=!0)}getSelfRect(){const t=super.getSelfRect(),e=this.pointerWidth()/2;return{x:t.x-e,y:t.y-e,width:t.width+2*e,height:t.height+2*e}}}ue.prototype.className="Arrow",d(ue),G.addGetterSetter(ue,"pointerLength",10,w()),G.addGetterSetter(ue,"pointerWidth",10,w()),G.addGetterSetter(ue,"pointerAtBeginning",!1),G.addGetterSetter(ue,"pointerAtEnding",!0);class fe extends jt{_sceneFunc(t){t.beginPath(),t.arc(0,0,this.attrs.radius||0,0,2*Math.PI,!1),t.closePath(),t.fillStrokeShape(this)}getWidth(){return 2*this.radius()}getHeight(){return 2*this.radius()}setWidth(t){this.radius()!==t/2&&this.radius(t/2)}setHeight(t){this.radius()!==t/2&&this.radius(t/2)}}fe.prototype._centroid=!0,fe.prototype.className="Circle",fe.prototype._attrsAffectingSize=["radius"],d(fe),G.addGetterSetter(fe,"radius",0,w());class pe extends jt{_sceneFunc(t){var e=this.radiusX(),i=this.radiusY();t.beginPath(),t.save(),e!==i&&t.scale(1,i/e),t.arc(0,0,e,0,2*Math.PI,!1),t.restore(),t.closePath(),t.fillStrokeShape(this)}getWidth(){return 2*this.radiusX()}getHeight(){return 2*this.radiusY()}setWidth(t){this.radiusX(t/2)}setHeight(t){this.radiusY(t/2)}}pe.prototype.className="Ellipse",pe.prototype._centroid=!0,pe.prototype._attrsAffectingSize=["radiusX","radiusY"],d(pe),G.addComponentsGetterSetter(pe,"radius",["x","y"]),G.addGetterSetter(pe,"radiusX",0,w()),G.addGetterSetter(pe,"radiusY",0,w());class ve extends jt{constructor(t){super(t),this.on("imageChange.konva",(()=>{this._setImageLoad()})),this._setImageLoad()}_setImageLoad(){const t=this.image();t&&t.addEventListener&&t.addEventListener("load",(()=>{this._requestDraw()}))}_useBufferCanvas(){return super._useBufferCanvas(!0)}_sceneFunc(t){const e=this.getWidth(),i=this.getHeight(),r=this.attrs.image;let a;if(r){const t=this.attrs.cropWidth,n=this.attrs.cropHeight;a=t&&n?[r,this.cropX(),this.cropY(),t,n,0,0,e,i]:[r,0,0,e,i]}(this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)),r&&t.drawImage.apply(t,a)}_hitFunc(t){var e=this.width(),i=this.height();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)}getWidth(){var t,e;return null!==(t=this.attrs.width)&&void 0!==t?t:null===(e=this.image())||void 0===e?void 0:e.width}getHeight(){var t,e;return null!==(t=this.attrs.height)&&void 0!==t?t:null===(e=this.image())||void 0===e?void 0:e.height}static fromURL(t,e){var i=y.createImageElement();i.onload=function(){var t=new ve({image:i});e(t)},i.crossOrigin="Anonymous",i.src=t}}ve.prototype.className="Image",d(ve),G.addGetterSetter(ve,"image"),G.addComponentsGetterSetter(ve,"crop",["x","y","width","height"]),G.addGetterSetter(ve,"cropX",0,w()),G.addGetterSetter(ve,"cropY",0,w()),G.addGetterSetter(ve,"cropWidth",0,w()),G.addGetterSetter(ve,"cropHeight",0,w());var me=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width","height"],_e="up",ye="right",xe="down",be="left",we=me.length;class Se extends $t{constructor(t){super(t),this.on("add.konva",(function(t){this._addListeners(t.child),this._sync()}))}getText(){return this.find("Text")[0]}getTag(){return this.find("Tag")[0]}_addListeners(t){var e,i=this,r=function(){i._sync()};for(e=0;e<we;e++)t.on(me[e]+"Change.konva",r)}getWidth(){return this.getText().width()}getHeight(){return this.getText().height()}_sync(){var t,e,i,r,a,n,s,o=this.getText(),h=this.getTag();if(o&&h){switch(t=o.width(),e=o.height(),i=h.pointerDirection(),r=h.pointerWidth(),s=h.pointerHeight(),a=0,n=0,i){case _e:a=t/2,n=-1*s;break;case ye:a=t+r,n=e/2;break;case xe:a=t/2,n=e+s;break;case be:a=-1*r,n=e/2}h.setAttrs({x:-1*a,y:-1*n,width:t,height:e}),o.setAttrs({x:-1*a,y:-1*n})}}}Se.prototype.className="Label",d(Se);class Ce extends jt{_sceneFunc(t){var e=this.width(),i=this.height(),r=this.pointerDirection(),a=this.pointerWidth(),n=this.pointerHeight(),s=this.cornerRadius();let o=0,h=0,l=0,d=0;"number"==typeof s?o=h=l=d=Math.min(s,e/2,i/2):(o=Math.min(s[0]||0,e/2,i/2),h=Math.min(s[1]||0,e/2,i/2),d=Math.min(s[2]||0,e/2,i/2),l=Math.min(s[3]||0,e/2,i/2)),t.beginPath(),t.moveTo(o,0),r===_e&&(t.lineTo((e-a)/2,0),t.lineTo(e/2,-1*n),t.lineTo((e+a)/2,0)),t.lineTo(e-h,0),t.arc(e-h,h,h,3*Math.PI/2,0,!1),r===ye&&(t.lineTo(e,(i-n)/2),t.lineTo(e+a,i/2),t.lineTo(e,(i+n)/2)),t.lineTo(e,i-d),t.arc(e-d,i-d,d,0,Math.PI/2,!1),r===xe&&(t.lineTo((e+a)/2,i),t.lineTo(e/2,i+n),t.lineTo((e-a)/2,i)),t.lineTo(l,i),t.arc(l,i-l,l,Math.PI/2,Math.PI,!1),r===be&&(t.lineTo(0,(i+n)/2),t.lineTo(-1*a,i/2),t.lineTo(0,(i-n)/2)),t.lineTo(0,o),t.arc(o,o,o,Math.PI,3*Math.PI/2,!1),t.closePath(),t.fillStrokeShape(this)}getSelfRect(){var t=0,e=0,i=this.pointerWidth(),r=this.pointerHeight(),a=this.pointerDirection(),n=this.width(),s=this.height();return a===_e?(e-=r,s+=r):a===xe?s+=r:a===be?(t-=1.5*i,n+=i):a===ye&&(n+=1.5*i),{x:t,y:e,width:n,height:s}}}Ce.prototype.className="Tag",d(Ce),G.addGetterSetter(Ce,"pointerDirection","none"),G.addGetterSetter(Ce,"pointerWidth",0,w()),G.addGetterSetter(Ce,"pointerHeight",0,w()),G.addGetterSetter(Ce,"cornerRadius",0,S(4));class Pe extends jt{_sceneFunc(t){var e=this.cornerRadius(),i=this.width(),r=this.height();if(t.beginPath(),e){let a=0,n=0,s=0,o=0;"number"==typeof e?a=n=s=o=Math.min(e,i/2,r/2):(a=Math.min(e[0]||0,i/2,r/2),n=Math.min(e[1]||0,i/2,r/2),o=Math.min(e[2]||0,i/2,r/2),s=Math.min(e[3]||0,i/2,r/2)),t.moveTo(a,0),t.lineTo(i-n,0),t.arc(i-n,n,n,3*Math.PI/2,0,!1),t.lineTo(i,r-o),t.arc(i-o,r-o,o,0,Math.PI/2,!1),t.lineTo(s,r),t.arc(s,r-s,s,Math.PI/2,Math.PI,!1),t.lineTo(0,a),t.arc(a,a,a,Math.PI,3*Math.PI/2,!1)}else t.rect(0,0,i,r);t.closePath(),t.fillStrokeShape(this)}}Pe.prototype.className="Rect",d(Pe),G.addGetterSetter(Pe,"cornerRadius",0,S(4));class ke extends jt{_sceneFunc(t){const e=this._getPoints();t.beginPath(),t.moveTo(e[0].x,e[0].y);for(var i=1;i<e.length;i++)t.lineTo(e[i].x,e[i].y);t.closePath(),t.fillStrokeShape(this)}_getPoints(){const t=this.attrs.sides,e=this.attrs.radius||0,i=[];for(var r=0;r<t;r++)i.push({x:e*Math.sin(2*r*Math.PI/t),y:-1*e*Math.cos(2*r*Math.PI/t)});return i}getSelfRect(){const t=this._getPoints();var e=t[0].x,i=t[0].y,r=t[0].x,a=t[0].y;return t.forEach((t=>{e=Math.min(e,t.x),i=Math.max(i,t.x),r=Math.min(r,t.y),a=Math.max(a,t.y)})),{x:e,y:r,width:i-e,height:a-r}}getWidth(){return 2*this.radius()}getHeight(){return 2*this.radius()}setWidth(t){this.radius(t/2)}setHeight(t){this.radius(t/2)}}ke.prototype.className="RegularPolygon",ke.prototype._centroid=!0,ke.prototype._attrsAffectingSize=["radius"],d(ke),G.addGetterSetter(ke,"radius",0,w()),G.addGetterSetter(ke,"sides",0,w());var Te=2*Math.PI;class Ae extends jt{_sceneFunc(t){t.beginPath(),t.arc(0,0,this.innerRadius(),0,Te,!1),t.moveTo(this.outerRadius(),0),t.arc(0,0,this.outerRadius(),Te,0,!0),t.closePath(),t.fillStrokeShape(this)}getWidth(){return 2*this.outerRadius()}getHeight(){return 2*this.outerRadius()}setWidth(t){this.outerRadius(t/2)}setHeight(t){this.outerRadius(t/2)}}Ae.prototype.className="Ring",Ae.prototype._centroid=!0,Ae.prototype._attrsAffectingSize=["innerRadius","outerRadius"],d(Ae),G.addGetterSetter(Ae,"innerRadius",0,w()),G.addGetterSetter(Ae,"outerRadius",0,w());class Me extends jt{constructor(t){super(t),this._updated=!0,this.anim=new te((()=>{var t=this._updated;return this._updated=!1,t})),this.on("animationChange.konva",(function(){this.frameIndex(0)})),this.on("frameIndexChange.konva",(function(){this._updated=!0})),this.on("frameRateChange.konva",(function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())}))}_sceneFunc(t){var e=this.animation(),i=this.frameIndex(),r=4*i,a=this.animations()[e],n=this.frameOffsets(),s=a[r+0],o=a[r+1],h=a[r+2],l=a[r+3],d=this.image();if((this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,h,l),t.closePath(),t.fillStrokeShape(this)),d)if(n){var c=n[e],g=2*i;t.drawImage(d,s,o,h,l,c[g+0],c[g+1],h,l)}else t.drawImage(d,s,o,h,l,0,0,h,l)}_hitFunc(t){var e=this.animation(),i=this.frameIndex(),r=4*i,a=this.animations()[e],n=this.frameOffsets(),s=a[r+2],o=a[r+3];if(t.beginPath(),n){var h=n[e],l=2*i;t.rect(h[l+0],h[l+1],s,o)}else t.rect(0,0,s,o);t.closePath(),t.fillShape(this)}_useBufferCanvas(){return super._useBufferCanvas(!0)}_setInterval(){var t=this;this.interval=setInterval((function(){t._updateIndex()}),1e3/this.frameRate())}start(){if(!this.isRunning()){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()}}stop(){this.anim.stop(),clearInterval(this.interval)}isRunning(){return this.anim.isRunning()}_updateIndex(){var t=this.frameIndex(),e=this.animation();t<this.animations()[e].length/4-1?this.frameIndex(t+1):this.frameIndex(0)}}Me.prototype.className="Sprite",d(Me),G.addGetterSetter(Me,"animation"),G.addGetterSetter(Me,"animations"),G.addGetterSetter(Me,"frameOffsets"),G.addGetterSetter(Me,"image"),G.addGetterSetter(Me,"frameIndex",0,w()),G.addGetterSetter(Me,"frameRate",17,w()),G.backCompat(Me,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"});class Ge extends jt{_sceneFunc(t){var e=this.innerRadius(),i=this.outerRadius(),r=this.numPoints();t.beginPath(),t.moveTo(0,0-i);for(var a=1;a<2*r;a++){var n=a%2==0?i:e,s=n*Math.sin(a*Math.PI/r),o=-1*n*Math.cos(a*Math.PI/r);t.lineTo(s,o)}t.closePath(),t.fillStrokeShape(this)}getWidth(){return 2*this.outerRadius()}getHeight(){return 2*this.outerRadius()}setWidth(t){this.outerRadius(t/2)}setHeight(t){this.outerRadius(t/2)}}function Le(t){return Array.from(t)}Ge.prototype.className="Star",Ge.prototype._centroid=!0,Ge.prototype._attrsAffectingSize=["innerRadius","outerRadius"],d(Ge),G.addGetterSetter(Ge,"numPoints",5,w()),G.addGetterSetter(Ge,"innerRadius",0,w()),G.addGetterSetter(Ge,"outerRadius",0,w());var Ee,Re="auto",De="justify",Oe="left",Ie="middle",Fe="normal",Ne=" ",Be=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],We=Be.length;function He(){return Ee||(Ee=y.createCanvasElement().getContext("2d"))}class ze extends jt{constructor(t){super(function(t){return(t=t||{}).fillLinearGradientColorStops||t.fillRadialGradientColorStops||t.fillPatternImage||(t.fill=t.fill||"black"),t}(t)),this._partialTextX=0,this._partialTextY=0;for(var e=0;e<We;e++)this.on(Be[e]+"Change.konva",this._setTextData);this._setTextData()}_sceneFunc(t){var e=this.textArr,i=e.length;if(this.text()){var r,a=this.padding(),n=this.fontSize(),s=this.lineHeight()*n,o=this.verticalAlign(),h=0,l=this.align(),d=this.getWidth(),c=this.letterSpacing(),g=this.fill(),u=this.textDecoration(),f=-1!==u.indexOf("underline"),p=-1!==u.indexOf("line-through"),v=0,m=(v=s/2,0),_=0;for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",Ie),t.setAttr("textAlign",Oe),o===Ie?h=(this.getHeight()-i*s-2*a)/2:"bottom"===o&&(h=this.getHeight()-i*s-2*a),t.translate(a,h+a),r=0;r<i;r++){m=0,_=0;var y,x,b,w=e[r],S=w.text,C=w.width,P=r!==i-1;if(t.save(),"right"===l?m+=d-C-2*a:"center"===l&&(m+=(d-C-2*a)/2),f&&(t.save(),t.beginPath(),t.moveTo(m,v+_+Math.round(n/2)),x=0==(y=S.split(" ").length-1),b=l===De&&P&&!x?d-2*a:C,t.lineTo(m+Math.round(b),v+_+Math.round(n/2)),t.lineWidth=n/15,t.strokeStyle=g,t.stroke(),t.restore()),p&&(t.save(),t.beginPath(),t.moveTo(m,v+_),x=0==(y=S.split(" ").length-1),b=l===De&&P&&!x?d-2*a:C,t.lineTo(m+Math.round(b),v+_),t.lineWidth=n/15,t.strokeStyle=g,t.stroke(),t.restore()),0!==c||l===De){y=S.split(" ").length-1;for(var k=Le(S),T=0;T<k.length;T++){var A=k[T];" "===A&&r!==i-1&&l===De&&(m+=(d-2*a-C)/y),this._partialTextX=m,this._partialTextY=v+_,this._partialText=A,t.fillStrokeShape(this),m+=this.measureSize(A).width+c}}else this._partialTextX=m,this._partialTextY=v+_,this._partialText=S,t.fillStrokeShape(this);t.restore(),i>1&&(v+=s)}}}_hitFunc(t){var e=this.getWidth(),i=this.getHeight();t.beginPath(),t.rect(0,0,e,i),t.closePath(),t.fillStrokeShape(this)}setText(t){var e=y._isString(t)?t:null==t?"":t+"";return this._setAttr("text",e),this}getWidth(){return this.attrs.width===Re||void 0===this.attrs.width?this.getTextWidth()+2*this.padding():this.attrs.width}getHeight(){return this.attrs.height===Re||void 0===this.attrs.height?this.fontSize()*this.textArr.length*this.lineHeight()+2*this.padding():this.attrs.height}getTextWidth(){return this.textWidth}getTextHeight(){return y.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight}measureSize(t){var e,i=He(),r=this.fontSize();return i.save(),i.font=this._getContextFont(),e=i.measureText(t),i.restore(),{width:e.width,height:r}}_getContextFont(){return this.fontStyle()+Ne+this.fontVariant()+Ne+(this.fontSize()+"px ")+this.fontFamily().split(",").map((t=>{const e=(t=t.trim()).indexOf(" ")>=0,i=t.indexOf('"')>=0||t.indexOf("'")>=0;return e&&!i&&(t=`"${t}"`),t})).join(", ")}_addTextLine(t){this.align()===De&&(t=t.trim());var e=this._getTextWidth(t);return this.textArr.push({text:t,width:e})}_getTextWidth(t){var e=this.letterSpacing(),i=t.length;return He().measureText(t).width+(i?e*(i-1):0)}_setTextData(){var t=this.text().split("\n"),e=+this.fontSize(),i=0,r=this.lineHeight()*e,a=this.attrs.width,n=this.attrs.height,s=a!==Re&&void 0!==a,o=n!==Re&&void 0!==n,h=this.padding(),l=a-2*h,d=n-2*h,c=0,g=this.wrap(),u="none"!==g,f="char"!==g&&u,p=this.ellipsis();this.textArr=[],He().font=this._getContextFont();for(var v=p?this._getTextWidth("…"):0,m=0,_=t.length;m<_;++m){var y=t[m],x=this._getTextWidth(y);if(s&&x>l)for(;y.length>0;){for(var b=0,w=y.length,S="",C=0;b<w;){var P=b+w>>>1,k=y.slice(0,P+1),T=this._getTextWidth(k)+v;T<=l?(b=P+1,S=k,C=T):w=P}if(!S)break;if(f){var A,M=y[S.length];(A=(M===Ne||"-"===M)&&C<=l?S.length:Math.max(S.lastIndexOf(Ne),S.lastIndexOf("-"))+1)>0&&(b=A,S=S.slice(0,b),C=this._getTextWidth(S))}if(S=S.trimRight(),this._addTextLine(S),i=Math.max(i,C),c+=r,!u||o&&c+r>d){var G=this.textArr[this.textArr.length-1];G&&p&&(this._getTextWidth(G.text+"…")<l||(G.text=G.text.slice(0,G.text.length-3)),this.textArr.splice(this.textArr.length-1,1),this._addTextLine(G.text+"…"));break}if((y=(y=y.slice(b)).trimLeft()).length>0&&(x=this._getTextWidth(y))<=l){this._addTextLine(y),c+=r,i=Math.max(i,x);break}}else this._addTextLine(y),c+=r,i=Math.max(i,x);if(o&&c+r>d)break}this.textHeight=e,this.textWidth=i}getStrokeScaleEnabled(){return!0}}ze.prototype._fillFunc=function(t){t.fillText(this._partialText,this._partialTextX,this._partialTextY)},ze.prototype._strokeFunc=function(t){t.strokeText(this._partialText,this._partialTextX,this._partialTextY)},ze.prototype.className="Text",ze.prototype._attrsAffectingSize=["text","fontSize","padding","wrap","lineHeight","letterSpacing"],d(ze),G.overWriteSetter(ze,"width",C()),G.overWriteSetter(ze,"height",C()),G.addGetterSetter(ze,"fontFamily","Arial"),G.addGetterSetter(ze,"fontSize",12,w()),G.addGetterSetter(ze,"fontStyle",Fe),G.addGetterSetter(ze,"fontVariant",Fe),G.addGetterSetter(ze,"padding",0,w()),G.addGetterSetter(ze,"align",Oe),G.addGetterSetter(ze,"verticalAlign","top"),G.addGetterSetter(ze,"lineHeight",1,w()),G.addGetterSetter(ze,"wrap","word"),G.addGetterSetter(ze,"ellipsis",!1,T()),G.addGetterSetter(ze,"letterSpacing",0,w()),G.addGetterSetter(ze,"text","",P()),G.addGetterSetter(ze,"textDecoration","");var qe="normal";function Ye(t){t.fillText(this.partialText,0,0)}function Xe(t){t.strokeText(this.partialText,0,0)}class Ue extends jt{constructor(t){super(t),this.dummyCanvas=y.createCanvasElement(),this.dataArray=[],this.dataArray=ge.parsePathData(this.attrs.data),this.on("dataChange.konva",(function(){this.dataArray=ge.parsePathData(this.attrs.data),this._setTextData()})),this.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva",this._setTextData),this._setTextData()}_sceneFunc(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",this.textBaseline()),t.setAttr("textAlign","left"),t.save();var e=this.textDecoration(),i=this.fill(),r=this.fontSize(),a=this.glyphInfo;"underline"===e&&t.beginPath();for(var n=0;n<a.length;n++){t.save();var s=a[n].p0;t.translate(s.x,s.y),t.rotate(a[n].rotation),this.partialText=a[n].text,t.fillStrokeShape(this),"underline"===e&&(0===n&&t.moveTo(0,r/2+1),t.lineTo(r,r/2+1)),t.restore()}"underline"===e&&(t.strokeStyle=i,t.lineWidth=r/20,t.stroke()),t.restore()}_hitFunc(t){t.beginPath();var e=this.glyphInfo;if(e.length>=1){var i=e[0].p0;t.moveTo(i.x,i.y)}for(var r=0;r<e.length;r++){var a=e[r].p1;t.lineTo(a.x,a.y)}t.setAttr("lineWidth",this.fontSize()),t.setAttr("strokeStyle",this.colorKey),t.stroke()}getTextWidth(){return this.textWidth}getTextHeight(){return y.warn("text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height."),this.textHeight}setText(t){return ze.prototype.setText.call(this,t)}_getContextFont(){return ze.prototype._getContextFont.call(this)}_getTextSize(t){var e=this.dummyCanvas.getContext("2d");e.save(),e.font=this._getContextFont();var i=e.measureText(t);return e.restore(),{width:i.width,height:parseInt(this.attrs.fontSize,10)}}_setTextData(){var t=this,e=this._getTextSize(this.attrs.text),i=this.letterSpacing(),r=this.align(),a=this.kerningFunc();this.textWidth=e.width,this.textHeight=e.height;var n=Math.max(this.textWidth+((this.attrs.text||"").length-1)*i,0);this.glyphInfo=[];for(var s=0,o=0;o<t.dataArray.length;o++)t.dataArray[o].pathLength>0&&(s+=t.dataArray[o].pathLength);var h=0;"center"===r&&(h=Math.max(0,s/2-n/2)),"right"===r&&(h=Math.max(0,s-n));for(var l,d,c,g=Le(this.text()),u=this.text().split(" ").length-1,f=-1,p=0,v=function(){p=0;for(var e=t.dataArray,i=f+1;i<e.length;i++){if(e[i].pathLength>0)return f=i,e[i];"M"===e[i].command&&(l={x:e[i].points[0],y:e[i].points[1]})}return{}},m=function(e){var a=t._getTextSize(e).width+i;" "===e&&"justify"===r&&(a+=(s-n)/u);var o=0,h=0;for(d=void 0;Math.abs(a-o)/a>.01&&h<20;){h++;for(var g=o;void 0===c;)(c=v())&&g+c.pathLength<a&&(g+=c.pathLength,c=void 0);if(c==={}||void 0===l)return;var f=!1;switch(c.command){case"L":ge.getLineLength(l.x,l.y,c.points[0],c.points[1])>a?d=ge.getPointOnLine(a,l.x,l.y,c.points[0],c.points[1],l.x,l.y):c=void 0;break;case"A":var m=c.points[4],_=c.points[5],y=c.points[4]+_;0===p?p=m+1e-8:a>o?p+=Math.PI/180*_/Math.abs(_):p-=Math.PI/360*_/Math.abs(_),(_<0&&p<y||_>=0&&p>y)&&(p=y,f=!0),d=ge.getPointOnEllipticalArc(c.points[0],c.points[1],c.points[2],c.points[3],p,c.points[6]);break;case"C":0===p?p=a>c.pathLength?1e-8:a/c.pathLength:a>o?p+=(a-o)/c.pathLength/2:p=Math.max(p-(o-a)/c.pathLength/2,0),p>1&&(p=1,f=!0),d=ge.getPointOnCubicBezier(p,c.start.x,c.start.y,c.points[0],c.points[1],c.points[2],c.points[3],c.points[4],c.points[5]);break;case"Q":0===p?p=a/c.pathLength:a>o?p+=(a-o)/c.pathLength:p-=(o-a)/c.pathLength,p>1&&(p=1,f=!0),d=ge.getPointOnQuadraticBezier(p,c.start.x,c.start.y,c.points[0],c.points[1],c.points[2],c.points[3])}void 0!==d&&(o=ge.getLineLength(l.x,l.y,d.x,d.y)),f&&(f=!1,c=void 0)}},_=h/(t._getTextSize("C").width+i)-1,y=0;y<_&&(m("C"),void 0!==l&&void 0!==d);y++)l=d;for(var x=0;x<g.length&&(m(g[x]),void 0!==l&&void 0!==d);x++){var b=ge.getLineLength(l.x,l.y,d.x,d.y),w=0;if(a)try{w=a(g[x-1],g[x])*this.fontSize()}catch(t){w=0}l.x+=w,d.x+=w,this.textWidth+=w;var S=ge.getPointOnLine(w+b/2,l.x,l.y,d.x,d.y),C=Math.atan2(d.y-l.y,d.x-l.x);this.glyphInfo.push({transposeX:S.x,transposeY:S.y,text:g[x],rotation:C,p0:l,p1:d}),l=d}}getSelfRect(){if(!this.glyphInfo.length)return{x:0,y:0,width:0,height:0};var t=[];this.glyphInfo.forEach((function(e){t.push(e.p0.x),t.push(e.p0.y),t.push(e.p1.x),t.push(e.p1.y)}));for(var e,i,r=t[0]||0,a=t[0]||0,n=t[1]||0,s=t[1]||0,o=0;o<t.length/2;o++)e=t[2*o],i=t[2*o+1],r=Math.min(r,e),a=Math.max(a,e),n=Math.min(n,i),s=Math.max(s,i);var h=this.fontSize();return{x:r-h/2,y:n-h/2,width:a-r+h,height:s-n+h}}}Ue.prototype._fillFunc=Ye,Ue.prototype._strokeFunc=Xe,Ue.prototype._fillFuncHit=Ye,Ue.prototype._strokeFuncHit=Xe,Ue.prototype.className="TextPath",Ue.prototype._attrsAffectingSize=["text","fontSize","data"],d(Ue),G.addGetterSetter(Ue,"data"),G.addGetterSetter(Ue,"fontFamily","Arial"),G.addGetterSetter(Ue,"fontSize",12,w()),G.addGetterSetter(Ue,"fontStyle",qe),G.addGetterSetter(Ue,"align","left"),G.addGetterSetter(Ue,"letterSpacing",0,w()),G.addGetterSetter(Ue,"textBaseline","middle"),G.addGetterSetter(Ue,"fontVariant",qe),G.addGetterSetter(Ue,"text",""),G.addGetterSetter(Ue,"textDecoration",null),G.addGetterSetter(Ue,"kerningFunc",null);var je=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].map((t=>t+".tr-konva")).join(" "),Qe="nodesRect",Ve=["widthChange","heightChange","scaleXChange","scaleYChange","skewXChange","skewYChange","rotationChange","offsetXChange","offsetYChange","transformsEnabledChange","strokeWidthChange"].map((t=>t+".tr-konva")).join(" "),Ke={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135};const Je="ontouchstart"in l._global;var $e=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];function Ze(t,e,i){const r=i.x+(t.x-i.x)*Math.cos(e)-(t.y-i.y)*Math.sin(e),a=i.y+(t.x-i.x)*Math.sin(e)+(t.y-i.y)*Math.cos(e);return Object.assign(Object.assign({},t),{rotation:t.rotation+e,x:r,y:a})}class ti extends $t{constructor(t){super(t),this._transforming=!1,this._createElements(),this._handleMouseMove=this._handleMouseMove.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this.update=this.update.bind(this),this.on(je,this.update),this.getNode()&&this.update()}attachTo(t){return this.setNode(t),this}setNode(t){return y.warn("tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead."),this.setNodes([t])}getNode(){return this._nodes&&this._nodes[0]}setNodes(t=[]){return this._nodes&&this._nodes.length&&this.detach(),this._nodes=t,1===t.length?this.rotation(t[0].getAbsoluteRotation()):this.rotation(0),this._nodes.forEach((t=>{const e=t._attrsAffectingSize.map((t=>t+"Change.tr-konva")).join(" "),i=()=>{1===this.nodes().length&&this.rotation(this.nodes()[0].getAbsoluteRotation()),this._resetTransformCache(),this._transforming||this.isDragging()||this.update()};t.on(e,i),t.on(Ve,i),t.on("absoluteTransformChange.tr-konva",i),t.on("xChange.tr-konva yChange.tr-konva",i),this._proxyDrag(t)})),this._resetTransformCache(),!!this.findOne(".top-left")&&this.update(),this}_proxyDrag(t){let e;t.on("dragstart.tr-konva",(i=>{e=t.getAbsolutePosition(),this.isDragging()||t===this.findOne(".back")||this.startDrag(i,!1)})),t.on("dragmove.tr-konva",(i=>{if(!e)return;const r=t.getAbsolutePosition(),a=r.x-e.x,n=r.y-e.y;this.nodes().forEach((e=>{if(e===t)return;if(e.isDragging())return;const r=e.getAbsolutePosition();e.setAbsolutePosition({x:r.x+a,y:r.y+n}),e.startDrag(i)})),e=null}))}getNodes(){return this._nodes||[]}getActiveAnchor(){return this._movingAnchorName}detach(){this._nodes&&this._nodes.forEach((t=>{t.off(".tr-konva")})),this._nodes=[],this._resetTransformCache()}_resetTransformCache(){this._clearCache(Qe),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")}_getNodeRect(){return this._getCache(Qe,this.__getNodeRect)}__getNodeShape(t,e=this.rotation(),i){var r=t.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),a=t.getAbsoluteScale(i),n=t.getAbsolutePosition(i),s=r.x*a.x-t.offsetX()*a.x,o=r.y*a.y-t.offsetY()*a.y;const h=(l.getAngle(t.getAbsoluteRotation())+2*Math.PI)%(2*Math.PI);return Ze({x:n.x+s*Math.cos(h)+o*Math.sin(-h),y:n.y+o*Math.cos(h)+s*Math.sin(h),width:r.width*a.x,height:r.height*a.y,rotation:h},-l.getAngle(e),{x:0,y:0})}__getNodeRect(){if(!this.getNode())return{x:-1e8,y:-1e8,width:0,height:0,rotation:0};const t=[];this.nodes().map((e=>{const i=e.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()});var r=[{x:i.x,y:i.y},{x:i.x+i.width,y:i.y},{x:i.x+i.width,y:i.y+i.height},{x:i.x,y:i.y+i.height}],a=e.getAbsoluteTransform();r.forEach((function(e){var i=a.point(e);t.push(i)}))}));const e=new c;var i,r,a,n;e.rotate(-l.getAngle(this.rotation())),t.forEach((function(t){var s=e.point(t);void 0===i&&(i=a=s.x,r=n=s.y),i=Math.min(i,s.x),r=Math.min(r,s.y),a=Math.max(a,s.x),n=Math.max(n,s.y)})),e.invert();const s=e.point({x:i,y:r});return{x:s.x,y:s.y,width:a-i,height:n-r,rotation:l.getAngle(this.rotation())}}getX(){return this._getNodeRect().x}getY(){return this._getNodeRect().y}getWidth(){return this._getNodeRect().width}getHeight(){return this._getNodeRect().height}_createElements(){this._createBack(),$e.forEach(function(t){this._createAnchor(t)}.bind(this)),this._createAnchor("rotater")}_createAnchor(t){var e=new Pe({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:t+" _anchor",dragDistance:0,draggable:!0,hitStrokeWidth:Je?10:"auto"}),i=this;e.on("mousedown touchstart",(function(t){i._handleMouseDown(t)})),e.on("dragstart",(t=>{e.stopDrag(),t.cancelBubble=!0})),e.on("dragend",(t=>{t.cancelBubble=!0})),e.on("mouseenter",(()=>{var i=l.getAngle(this.rotation()),r=function(t,e){if("rotater"===t)return"crosshair";e+=y.degToRad(Ke[t]||0);var i=(y.radToDeg(e)%360+360)%360;return y._inRange(i,337.5,360)||y._inRange(i,0,22.5)?"ns-resize":y._inRange(i,22.5,67.5)?"nesw-resize":y._inRange(i,67.5,112.5)?"ew-resize":y._inRange(i,112.5,157.5)?"nwse-resize":y._inRange(i,157.5,202.5)?"ns-resize":y._inRange(i,202.5,247.5)?"nesw-resize":y._inRange(i,247.5,292.5)?"ew-resize":y._inRange(i,292.5,337.5)?"nwse-resize":(y.error("Transformer has unknown angle for cursor detection: "+i),"pointer")}(t,i);e.getStage().content&&(e.getStage().content.style.cursor=r),this._cursorChange=!0})),e.on("mouseout",(()=>{e.getStage().content&&(e.getStage().content.style.cursor=""),this._cursorChange=!1})),this.add(e)}_createBack(){var t=new jt({name:"back",width:0,height:0,draggable:!0,sceneFunc(t){var e=this.getParent(),i=e.padding();t.beginPath(),t.rect(-i,-i,this.width()+2*i,this.height()+2*i),t.moveTo(this.width()/2,-i),e.rotateEnabled()&&t.lineTo(this.width()/2,-e.rotateAnchorOffset()*y._sign(this.height())-i),t.fillStrokeShape(this)},hitFunc:(t,e)=>{if(this.shouldOverdrawWholeArea()){var i=this.padding();t.beginPath(),t.rect(-i,-i,e.width()+2*i,e.height()+2*i),t.fillStrokeShape(e)}}});this.add(t),this._proxyDrag(t),t.on("dragstart",(t=>{t.cancelBubble=!0})),t.on("dragmove",(t=>{t.cancelBubble=!0})),t.on("dragend",(t=>{t.cancelBubble=!0}))}_handleMouseDown(t){this._movingAnchorName=t.target.name().split(" ")[0];var e=this._getNodeRect(),i=e.width,r=e.height,a=Math.sqrt(Math.pow(i,2)+Math.pow(r,2));this.sin=Math.abs(r/a),this.cos=Math.abs(i/a),"undefined"!=typeof window&&(window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0)),this._transforming=!0;var n=t.target.getAbsolutePosition(),s=t.target.getStage().getPointerPosition();this._anchorDragOffset={x:s.x-n.x,y:s.y-n.y},this._fire("transformstart",{evt:t,target:this.getNode()}),this._nodes.forEach((e=>{e._fire("transformstart",{evt:t,target:e})}))}_handleMouseMove(t){var e,i,r,a=this.findOne("."+this._movingAnchorName),n=a.getStage();n.setPointersPositions(t);const s=n.getPointerPosition();var o={x:s.x-this._anchorDragOffset.x,y:s.y-this._anchorDragOffset.y};const h=a.getAbsolutePosition();a.setAbsolutePosition(o);const d=a.getAbsolutePosition();if(h.x!==d.x||h.y!==d.y)if("rotater"!==this._movingAnchorName){var c=this.keepRatio()||t.shiftKey,g=this.centeredScaling()||t.altKey;if("top-left"===this._movingAnchorName){if(c){var u=g?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-right").x(),y:this.findOne(".bottom-right").y()};r=Math.sqrt(Math.pow(u.x-a.x(),2)+Math.pow(u.y-a.y(),2));var f=this.findOne(".top-left").x()>u.x?-1:1,p=this.findOne(".top-left").y()>u.y?-1:1;e=r*this.cos*f,i=r*this.sin*p,this.findOne(".top-left").x(u.x-e),this.findOne(".top-left").y(u.y-i)}}else if("top-center"===this._movingAnchorName)this.findOne(".top-left").y(a.y());else if("top-right"===this._movingAnchorName){c&&(u=g?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".bottom-left").x(),y:this.findOne(".bottom-left").y()},r=Math.sqrt(Math.pow(a.x()-u.x,2)+Math.pow(u.y-a.y(),2)),f=this.findOne(".top-right").x()<u.x?-1:1,p=this.findOne(".top-right").y()>u.y?-1:1,e=r*this.cos*f,i=r*this.sin*p,this.findOne(".top-right").x(u.x+e),this.findOne(".top-right").y(u.y-i));var v=a.position();this.findOne(".top-left").y(v.y),this.findOne(".bottom-right").x(v.x)}else"middle-left"===this._movingAnchorName?this.findOne(".top-left").x(a.x()):"middle-right"===this._movingAnchorName?this.findOne(".bottom-right").x(a.x()):"bottom-left"===this._movingAnchorName?(c&&(u=g?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-right").x(),y:this.findOne(".top-right").y()},r=Math.sqrt(Math.pow(u.x-a.x(),2)+Math.pow(a.y()-u.y,2)),f=u.x<a.x()?-1:1,p=a.y()<u.y?-1:1,e=r*this.cos*f,i=r*this.sin*p,a.x(u.x-e),a.y(u.y+i)),v=a.position(),this.findOne(".top-left").x(v.x),this.findOne(".bottom-right").y(v.y)):"bottom-center"===this._movingAnchorName?this.findOne(".bottom-right").y(a.y()):"bottom-right"===this._movingAnchorName?c&&(u=g?{x:this.width()/2,y:this.height()/2}:{x:this.findOne(".top-left").x(),y:this.findOne(".top-left").y()},r=Math.sqrt(Math.pow(a.x()-u.x,2)+Math.pow(a.y()-u.y,2)),f=this.findOne(".bottom-right").x()<u.x?-1:1,p=this.findOne(".bottom-right").y()<u.y?-1:1,e=r*this.cos*f,i=r*this.sin*p,this.findOne(".bottom-right").x(u.x+e),this.findOne(".bottom-right").y(u.y+i)):console.error(new Error("Wrong position argument of selection resizer: "+this._movingAnchorName));if(g=this.centeredScaling()||t.altKey){var m=this.findOne(".top-left"),_=this.findOne(".bottom-right"),y=m.x(),x=m.y(),b=this.getWidth()-_.x(),w=this.getHeight()-_.y();_.move({x:-y,y:-x}),m.move({x:b,y:w})}var S=this.findOne(".top-left").getAbsolutePosition();e=S.x,i=S.y;var C=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),P=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodesInto({x:e,y:i,width:C,height:P,rotation:l.getAngle(this.rotation())},t)}else{var k=this._getNodeRect();e=a.x()-k.width/2,i=-a.y()+k.height/2;let r=Math.atan2(-i,e)+Math.PI/2;k.height<0&&(r-=Math.PI);const n=l.getAngle(this.rotation())+r,s=l.getAngle(this.rotationSnapTolerance()),o=function(t,e){return Ze(t,e,function(t){return{x:t.x+t.width/2*Math.cos(t.rotation)+t.height/2*Math.sin(-t.rotation),y:t.y+t.height/2*Math.cos(t.rotation)+t.width/2*Math.sin(t.rotation)}}(t))}(k,function(t,e,i){let r=e;for(let a=0;a<t.length;a++){const n=l.getAngle(t[a]),s=Math.abs(n-e)%(2*Math.PI);Math.min(s,2*Math.PI-s)<i&&(r=n)}return r}(this.rotationSnaps(),n,s)-k.rotation);this._fitNodesInto(o,t)}}_handleMouseUp(t){this._removeEvents(t)}getAbsoluteTransform(){return this.getTransform()}_removeEvents(t){if(this._transforming){this._transforming=!1,"undefined"!=typeof window&&(window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0));var e=this.getNode();this._fire("transformend",{evt:t,target:e}),e&&this._nodes.forEach((e=>{e._fire("transformend",{evt:t,target:e})})),this._movingAnchorName=null}}_fitNodesInto(t,e){var i=this._getNodeRect();if(y._inRange(t.width,2*-this.padding()-1,1))return void this.update();if(y._inRange(t.height,2*-this.padding()-1,1))return void this.update();const r=this.flipEnabled();var a=new c;if(a.rotate(l.getAngle(this.rotation())),this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("left")>=0){const e=a.point({x:2*-this.padding(),y:0});if(t.x+=e.x,t.y+=e.y,t.width+=2*this.padding(),this._movingAnchorName=this._movingAnchorName.replace("left","right"),this._anchorDragOffset.x-=e.x,this._anchorDragOffset.y-=e.y,!r)return void this.update()}else if(this._movingAnchorName&&t.width<0&&this._movingAnchorName.indexOf("right")>=0){const e=a.point({x:2*this.padding(),y:0});if(this._movingAnchorName=this._movingAnchorName.replace("right","left"),this._anchorDragOffset.x-=e.x,this._anchorDragOffset.y-=e.y,t.width+=2*this.padding(),!r)return void this.update()}if(this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("top")>=0){const e=a.point({x:0,y:2*-this.padding()});if(t.x+=e.x,t.y+=e.y,this._movingAnchorName=this._movingAnchorName.replace("top","bottom"),this._anchorDragOffset.x-=e.x,this._anchorDragOffset.y-=e.y,t.height+=2*this.padding(),!r)return void this.update()}else if(this._movingAnchorName&&t.height<0&&this._movingAnchorName.indexOf("bottom")>=0){const e=a.point({x:0,y:2*this.padding()});if(this._movingAnchorName=this._movingAnchorName.replace("bottom","top"),this._anchorDragOffset.x-=e.x,this._anchorDragOffset.y-=e.y,t.height+=2*this.padding(),!r)return void this.update()}if(this.boundBoxFunc()){const e=this.boundBoxFunc()(i,t);e?t=e:y.warn("boundBoxFunc returned falsy. You should return new bound rect from it!")}const n=1e7,s=new c;s.translate(i.x,i.y),s.rotate(i.rotation),s.scale(i.width/n,i.height/n);const o=new c;o.translate(t.x,t.y),o.rotate(t.rotation),o.scale(t.width/n,t.height/n);const h=o.multiply(s.invert());this._nodes.forEach((t=>{var i;const r=t.getParent().getAbsoluteTransform(),a=t.getTransform().copy();a.translate(t.offsetX(),t.offsetY());const n=new c;n.multiply(r.copy().invert()).multiply(h).multiply(r).multiply(a);const s=n.decompose();t.setAttrs(s),this._fire("transform",{evt:e,target:t}),t._fire("transform",{evt:e,target:t}),null===(i=t.getLayer())||void 0===i||i.batchDraw()})),this.rotation(y._getRotation(t.rotation)),this._resetTransformCache(),this.update(),this.getLayer().batchDraw()}forceUpdate(){this._resetTransformCache(),this.update()}_batchChangeChild(t,e){this.findOne(t).setAttrs(e)}update(){var t,e=this._getNodeRect();this.rotation(y._getRotation(e.rotation));var i=e.width,r=e.height,a=this.enabledAnchors(),n=this.resizeEnabled(),s=this.padding(),o=this.anchorSize();this.find("._anchor").forEach((t=>{t.setAttrs({width:o,height:o,offsetX:o/2,offsetY:o/2,stroke:this.anchorStroke(),strokeWidth:this.anchorStrokeWidth(),fill:this.anchorFill(),cornerRadius:this.anchorCornerRadius()})})),this._batchChangeChild(".top-left",{x:0,y:0,offsetX:o/2+s,offsetY:o/2+s,visible:n&&a.indexOf("top-left")>=0}),this._batchChangeChild(".top-center",{x:i/2,y:0,offsetY:o/2+s,visible:n&&a.indexOf("top-center")>=0}),this._batchChangeChild(".top-right",{x:i,y:0,offsetX:o/2-s,offsetY:o/2+s,visible:n&&a.indexOf("top-right")>=0}),this._batchChangeChild(".middle-left",{x:0,y:r/2,offsetX:o/2+s,visible:n&&a.indexOf("middle-left")>=0}),this._batchChangeChild(".middle-right",{x:i,y:r/2,offsetX:o/2-s,visible:n&&a.indexOf("middle-right")>=0}),this._batchChangeChild(".bottom-left",{x:0,y:r,offsetX:o/2+s,offsetY:o/2-s,visible:n&&a.indexOf("bottom-left")>=0}),this._batchChangeChild(".bottom-center",{x:i/2,y:r,offsetY:o/2-s,visible:n&&a.indexOf("bottom-center")>=0}),this._batchChangeChild(".bottom-right",{x:i,y:r,offsetX:o/2-s,offsetY:o/2-s,visible:n&&a.indexOf("bottom-right")>=0}),this._batchChangeChild(".rotater",{x:i/2,y:-this.rotateAnchorOffset()*y._sign(r)-s,visible:this.rotateEnabled()}),this._batchChangeChild(".back",{width:i,height:r,visible:this.borderEnabled(),stroke:this.borderStroke(),strokeWidth:this.borderStrokeWidth(),dash:this.borderDash(),x:0,y:0}),null===(t=this.getLayer())||void 0===t||t.batchDraw()}isTransforming(){return this._transforming}stopTransform(){if(this._transforming){this._removeEvents();var t=this.findOne("."+this._movingAnchorName);t&&t.stopDrag()}}destroy(){return this.getStage()&&this._cursorChange&&this.getStage().content&&(this.getStage().content.style.cursor=""),$t.prototype.destroy.call(this),this.detach(),this._removeEvents(),this}toObject(){return it.prototype.toObject.call(this)}}ti.prototype.className="Transformer",d(ti),G.addGetterSetter(ti,"enabledAnchors",$e,(function(t){return t instanceof Array||y.warn("enabledAnchors value should be an array"),t instanceof Array&&t.forEach((function(t){-1===$e.indexOf(t)&&y.warn("Unknown anchor name: "+t+". Available names are: "+$e.join(", "))})),t||[]})),G.addGetterSetter(ti,"flipEnabled",!0,T()),G.addGetterSetter(ti,"resizeEnabled",!0),G.addGetterSetter(ti,"anchorSize",10,w()),G.addGetterSetter(ti,"rotateEnabled",!0),G.addGetterSetter(ti,"rotationSnaps",[]),G.addGetterSetter(ti,"rotateAnchorOffset",50,w()),G.addGetterSetter(ti,"rotationSnapTolerance",5,w()),G.addGetterSetter(ti,"borderEnabled",!0),G.addGetterSetter(ti,"anchorStroke","rgb(0, 161, 255)"),G.addGetterSetter(ti,"anchorStrokeWidth",1,w()),G.addGetterSetter(ti,"anchorFill","white"),G.addGetterSetter(ti,"anchorCornerRadius",0,w()),G.addGetterSetter(ti,"borderStroke","rgb(0, 161, 255)"),G.addGetterSetter(ti,"borderStrokeWidth",1,w()),G.addGetterSetter(ti,"borderDash"),G.addGetterSetter(ti,"keepRatio",!0),G.addGetterSetter(ti,"centeredScaling",!1),G.addGetterSetter(ti,"ignoreStroke",!1),G.addGetterSetter(ti,"padding",0,w()),G.addGetterSetter(ti,"node"),G.addGetterSetter(ti,"nodes"),G.addGetterSetter(ti,"boundBoxFunc"),G.addGetterSetter(ti,"shouldOverdrawWholeArea",!1),G.backCompat(ti,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"});class ei extends jt{_sceneFunc(t){t.beginPath(),t.arc(0,0,this.radius(),0,l.getAngle(this.angle()),this.clockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)}getWidth(){return 2*this.radius()}getHeight(){return 2*this.radius()}setWidth(t){this.radius(t/2)}setHeight(t){this.radius(t/2)}}function ii(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}ei.prototype.className="Wedge",ei.prototype._centroid=!0,ei.prototype._attrsAffectingSize=["radius"],d(ei),G.addGetterSetter(ei,"radius",0,w()),G.addGetterSetter(ei,"angle",0,w()),G.addGetterSetter(ei,"clockwise",!1),G.backCompat(ei,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"});var ri=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],ai=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function ni(t,e,i,r,a){var n=i-e,s=a-r;return 0===n?r+s/2:0===s?r:s*((t-e)/n)+r}function si(t,e,i){var r=4*(i*t.width+e),a=[];return a.push(t.data[r++],t.data[r++],t.data[r++],t.data[r++]),a}function oi(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2)+Math.pow(t[2]-e[2],2))}G.addGetterSetter(it,"blurRadius",0,w(),G.afterSetFilter),G.addGetterSetter(it,"brightness",0,w(),G.afterSetFilter),G.addGetterSetter(it,"contrast",0,w(),G.afterSetFilter),G.addGetterSetter(it,"embossStrength",.5,w(),G.afterSetFilter),G.addGetterSetter(it,"embossWhiteLevel",.5,w(),G.afterSetFilter),G.addGetterSetter(it,"embossDirection","top-left",null,G.afterSetFilter),G.addGetterSetter(it,"embossBlend",!1,null,G.afterSetFilter),G.addGetterSetter(it,"enhance",0,w(),G.afterSetFilter),G.addGetterSetter(it,"hue",0,w(),G.afterSetFilter),G.addGetterSetter(it,"saturation",0,w(),G.afterSetFilter),G.addGetterSetter(it,"luminance",0,w(),G.afterSetFilter),G.addGetterSetter(it,"hue",0,w(),G.afterSetFilter),G.addGetterSetter(it,"saturation",0,w(),G.afterSetFilter),G.addGetterSetter(it,"value",0,w(),G.afterSetFilter),G.addGetterSetter(it,"kaleidoscopePower",2,w(),G.afterSetFilter),G.addGetterSetter(it,"kaleidoscopeAngle",0,w(),G.afterSetFilter),G.addGetterSetter(it,"threshold",0,w(),G.afterSetFilter),G.addGetterSetter(it,"noise",.2,w(),G.afterSetFilter),G.addGetterSetter(it,"pixelSize",8,w(),G.afterSetFilter),G.addGetterSetter(it,"levels",.5,w(),G.afterSetFilter),G.addGetterSetter(it,"red",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),G.addGetterSetter(it,"green",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),G.addGetterSetter(it,"blue",0,b,G.afterSetFilter),G.addGetterSetter(it,"red",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),G.addGetterSetter(it,"green",0,(function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)})),G.addGetterSetter(it,"blue",0,b,G.afterSetFilter),G.addGetterSetter(it,"alpha",1,(function(t){return this._filterUpToDate=!1,t>1?1:t<0?0:t})),G.addGetterSetter(it,"threshold",.5,w(),G.afterSetFilter);const hi=oe.Util._assign(oe,{Arc:he,Arrow:ue,Circle:fe,Ellipse:pe,Image:ve,Label:Se,Tag:Ce,Line:ce,Path:ge,Rect:Pe,RegularPolygon:ke,Ring:Ae,Sprite:Me,Star:Ge,Text:ze,TextPath:Ue,Transformer:ti,Wedge:ei,Filters:{Blur:function(t){var e=Math.round(this.blurRadius());e>0&&function(t,e){var i,r,a,n,s,o,h,l,d,c,g,u,f,p,v,m,_,y,x,b,w,S,C,P,k=t.data,T=t.width,A=t.height,M=e+e+1,G=T-1,L=A-1,E=e+1,R=E*(E+1)/2,D=new ii,O=null,I=D,F=null,N=null,B=ri[e],W=ai[e];for(a=1;a<M;a++)I=I.next=new ii,a===E&&(O=I);for(I.next=D,h=o=0,r=0;r<A;r++){for(m=_=y=x=l=d=c=g=0,u=E*(b=k[o]),f=E*(w=k[o+1]),p=E*(S=k[o+2]),v=E*(C=k[o+3]),l+=R*b,d+=R*w,c+=R*S,g+=R*C,I=D,a=0;a<E;a++)I.r=b,I.g=w,I.b=S,I.a=C,I=I.next;for(a=1;a<E;a++)n=o+((G<a?G:a)<<2),l+=(I.r=b=k[n])*(P=E-a),d+=(I.g=w=k[n+1])*P,c+=(I.b=S=k[n+2])*P,g+=(I.a=C=k[n+3])*P,m+=b,_+=w,y+=S,x+=C,I=I.next;for(F=D,N=O,i=0;i<T;i++)k[o+3]=C=g*B>>W,0!==C?(C=255/C,k[o]=(l*B>>W)*C,k[o+1]=(d*B>>W)*C,k[o+2]=(c*B>>W)*C):k[o]=k[o+1]=k[o+2]=0,l-=u,d-=f,c-=p,g-=v,u-=F.r,f-=F.g,p-=F.b,v-=F.a,n=h+((n=i+e+1)<G?n:G)<<2,l+=m+=F.r=k[n],d+=_+=F.g=k[n+1],c+=y+=F.b=k[n+2],g+=x+=F.a=k[n+3],F=F.next,u+=b=N.r,f+=w=N.g,p+=S=N.b,v+=C=N.a,m-=b,_-=w,y-=S,x-=C,N=N.next,o+=4;h+=T}for(i=0;i<T;i++){for(_=y=x=m=d=c=g=l=0,u=E*(b=k[o=i<<2]),f=E*(w=k[o+1]),p=E*(S=k[o+2]),v=E*(C=k[o+3]),l+=R*b,d+=R*w,c+=R*S,g+=R*C,I=D,a=0;a<E;a++)I.r=b,I.g=w,I.b=S,I.a=C,I=I.next;for(s=T,a=1;a<=e;a++)o=s+i<<2,l+=(I.r=b=k[o])*(P=E-a),d+=(I.g=w=k[o+1])*P,c+=(I.b=S=k[o+2])*P,g+=(I.a=C=k[o+3])*P,m+=b,_+=w,y+=S,x+=C,I=I.next,a<L&&(s+=T);for(o=i,F=D,N=O,r=0;r<A;r++)k[3+(n=o<<2)]=C=g*B>>W,C>0?(C=255/C,k[n]=(l*B>>W)*C,k[n+1]=(d*B>>W)*C,k[n+2]=(c*B>>W)*C):k[n]=k[n+1]=k[n+2]=0,l-=u,d-=f,c-=p,g-=v,u-=F.r,f-=F.g,p-=F.b,v-=F.a,n=i+((n=r+E)<L?n:L)*T<<2,l+=m+=F.r=k[n],d+=_+=F.g=k[n+1],c+=y+=F.b=k[n+2],g+=x+=F.a=k[n+3],F=F.next,u+=b=N.r,f+=w=N.g,p+=S=N.b,v+=C=N.a,m-=b,_-=w,y-=S,x-=C,N=N.next,o+=T}}(t,e)},Brighten:function(t){var e,i=255*this.brightness(),r=t.data,a=r.length;for(e=0;e<a;e+=4)r[e]+=i,r[e+1]+=i,r[e+2]+=i},Contrast:function(t){var e,i=Math.pow((this.contrast()+100)/100,2),r=t.data,a=r.length,n=150,s=150,o=150;for(e=0;e<a;e+=4)n=r[e],s=r[e+1],o=r[e+2],n/=255,n-=.5,n*=i,n+=.5,s/=255,s-=.5,s*=i,s+=.5,o/=255,o-=.5,o*=i,o+=.5,n=(n*=255)<0?0:n>255?255:n,s=(s*=255)<0?0:s>255?255:s,o=(o*=255)<0?0:o>255?255:o,r[e]=n,r[e+1]=s,r[e+2]=o},Emboss:function(t){var e=10*this.embossStrength(),i=255*this.embossWhiteLevel(),r=this.embossDirection(),a=this.embossBlend(),n=0,s=0,o=t.data,h=t.width,l=t.height,d=4*h,c=l;switch(r){case"top-left":n=-1,s=-1;break;case"top":n=-1,s=0;break;case"top-right":n=-1,s=1;break;case"right":n=0,s=1;break;case"bottom-right":n=1,s=1;break;case"bottom":n=1,s=0;break;case"bottom-left":n=1,s=-1;break;case"left":n=0,s=-1;break;default:y.error("Unknown emboss direction: "+r)}do{var g=(c-1)*d,u=n;c+u<1&&(u=0),c+u>l&&(u=0);var f=(c-1+u)*h*4,p=h;do{var v=g+4*(p-1),m=s;p+m<1&&(m=0),p+m>h&&(m=0);var _=f+4*(p-1+m),x=o[v]-o[_],b=o[v+1]-o[_+1],w=o[v+2]-o[_+2],S=x,C=S>0?S:-S;if((b>0?b:-b)>C&&(S=b),(w>0?w:-w)>C&&(S=w),S*=e,a){var P=o[v]+S,k=o[v+1]+S,T=o[v+2]+S;o[v]=P>255?255:P<0?0:P,o[v+1]=k>255?255:k<0?0:k,o[v+2]=T>255?255:T<0?0:T}else{var A=i-S;A<0?A=0:A>255&&(A=255),o[v]=o[v+1]=o[v+2]=A}}while(--p)}while(--c)},Enhance:function(t){var e,i,r,a,n=t.data,s=n.length,o=n[0],h=o,l=n[1],d=l,c=n[2],g=c,u=this.enhance();if(0!==u){for(a=0;a<s;a+=4)(e=n[a+0])<o?o=e:e>h&&(h=e),(i=n[a+1])<l?l=i:i>d&&(d=i),(r=n[a+2])<c?c=r:r>g&&(g=r);var f,p,v,m,_,y,x,b,w;for(h===o&&(h=255,o=0),d===l&&(d=255,l=0),g===c&&(g=255,c=0),u>0?(p=h+u*(255-h),v=o-u*(o-0),_=d+u*(255-d),y=l-u*(l-0),b=g+u*(255-g),w=c-u*(c-0)):(p=h+u*(h-(f=.5*(h+o))),v=o+u*(o-f),_=d+u*(d-(m=.5*(d+l))),y=l+u*(l-m),b=g+u*(g-(x=.5*(g+c))),w=c+u*(c-x)),a=0;a<s;a+=4)n[a+0]=ni(n[a+0],o,h,v,p),n[a+1]=ni(n[a+1],l,d,y,_),n[a+2]=ni(n[a+2],c,g,w,b)}},Grayscale:function(t){var e,i,r=t.data,a=r.length;for(e=0;e<a;e+=4)i=.34*r[e]+.5*r[e+1]+.16*r[e+2],r[e]=i,r[e+1]=i,r[e+2]=i},HSL:function(t){var e,i,r,a,n,s=t.data,o=s.length,h=Math.pow(2,this.saturation()),l=Math.abs(this.hue()+360)%360,d=127*this.luminance(),c=1*h*Math.cos(l*Math.PI/180),g=1*h*Math.sin(l*Math.PI/180),u=.299+.701*c+.167*g,f=.587-.587*c+.33*g,p=.114-.114*c-.497*g,v=.299-.299*c-.328*g,m=.587+.413*c+.035*g,_=.114-.114*c+.293*g,y=.299-.3*c+1.25*g,x=.587-.586*c-1.05*g,b=.114+.886*c-.2*g;for(e=0;e<o;e+=4)i=s[e+0],r=s[e+1],a=s[e+2],n=s[e+3],s[e+0]=u*i+f*r+p*a+d,s[e+1]=v*i+m*r+_*a+d,s[e+2]=y*i+x*r+b*a+d,s[e+3]=n},HSV:function(t){var e,i,r,a,n,s=t.data,o=s.length,h=Math.pow(2,this.value()),l=Math.pow(2,this.saturation()),d=Math.abs(this.hue()+360)%360,c=h*l*Math.cos(d*Math.PI/180),g=h*l*Math.sin(d*Math.PI/180),u=.299*h+.701*c+.167*g,f=.587*h-.587*c+.33*g,p=.114*h-.114*c-.497*g,v=.299*h-.299*c-.328*g,m=.587*h+.413*c+.035*g,_=.114*h-.114*c+.293*g,y=.299*h-.3*c+1.25*g,x=.587*h-.586*c-1.05*g,b=.114*h+.886*c-.2*g;for(e=0;e<o;e+=4)i=s[e+0],r=s[e+1],a=s[e+2],n=s[e+3],s[e+0]=u*i+f*r+p*a,s[e+1]=v*i+m*r+_*a,s[e+2]=y*i+x*r+b*a,s[e+3]=n},Invert:function(t){var e,i=t.data,r=i.length;for(e=0;e<r;e+=4)i[e]=255-i[e],i[e+1]=255-i[e+1],i[e+2]=255-i[e+2]},Kaleidoscope:function(t){var e,i,r,a,n,s,o,h,l,d=t.width,c=t.height,g=Math.round(this.kaleidoscopePower()),u=Math.round(this.kaleidoscopeAngle()),f=Math.floor(d*(u%360)/360);if(!(g<1)){var p=y.createCanvasElement();p.width=d,p.height=c;var v=p.getContext("2d").getImageData(0,0,d,c);!function(t,e,i){var r,a,n,s,o=t.data,h=e.data,l=t.width,d=t.height,c=i.polarCenterX||l/2,g=i.polarCenterY||d/2,u=0,f=0,p=0,v=0,m=Math.sqrt(c*c+g*g);a=l-c,n=d-g,m=(s=Math.sqrt(a*a+n*n))>m?s:m;var _,y,x,b,w=d,S=l,C=360/S*Math.PI/180;for(y=0;y<S;y+=1)for(x=Math.sin(y*C),b=Math.cos(y*C),_=0;_<w;_+=1)a=Math.floor(c+m*_/w*b),u=o[0+(r=4*((n=Math.floor(g+m*_/w*x))*l+a))],f=o[r+1],p=o[r+2],v=o[r+3],h[0+(r=4*(y+_*l))]=u,h[r+1]=f,h[r+2]=p,h[r+3]=v}(t,v,{polarCenterX:d/2,polarCenterY:c/2});for(var m=d/Math.pow(2,g);m<=8;)m*=2,g-=1;var _=m=Math.ceil(m),x=0,b=_,w=1;for(f+m>d&&(x=_,b=0,w=-1),i=0;i<c;i+=1)for(e=x;e!==b;e+=w)h=4*(d*i+Math.round(e+f)%d),a=v.data[h+0],n=v.data[h+1],s=v.data[h+2],o=v.data[h+3],l=4*(d*i+e),v.data[l+0]=a,v.data[l+1]=n,v.data[l+2]=s,v.data[l+3]=o;for(i=0;i<c;i+=1)for(_=Math.floor(m),r=0;r<g;r+=1){for(e=0;e<_+1;e+=1)h=4*(d*i+e),a=v.data[h+0],n=v.data[h+1],s=v.data[h+2],o=v.data[h+3],l=4*(d*i+2*_-e-1),v.data[l+0]=a,v.data[l+1]=n,v.data[l+2]=s,v.data[l+3]=o;_*=2}!function(t,e,i){var r,a,n,s,o,h,l=t.data,d=e.data,c=t.width,g=t.height,u=i.polarCenterX||c/2,f=i.polarCenterY||g/2,p=0,v=0,m=0,_=0,y=Math.sqrt(u*u+f*f);a=c-u,n=g-f,y=(h=Math.sqrt(a*a+n*n))>y?h:y;var x,b,w,S=g,C=c,P=i.polarRotation||0;for(a=0;a<c;a+=1)for(n=0;n<g;n+=1)s=a-u,o=n-f,x=Math.sqrt(s*s+o*o)*S/y,b=(b=(180*Math.atan2(o,s)/Math.PI+360+P)%360)*C/360,w=Math.floor(b),p=l[0+(r=4*(Math.floor(x)*c+w))],v=l[r+1],m=l[r+2],_=l[r+3],d[0+(r=4*(n*c+a))]=p,d[r+1]=v,d[r+2]=m,d[r+3]=_}(v,t,{polarRotation:0})}},Mask:function(t){var e=function(t,e){var i=si(t,0,0),r=si(t,t.width-1,0),a=si(t,0,t.height-1),n=si(t,t.width-1,t.height-1),s=e||10;if(oi(i,r)<s&&oi(r,n)<s&&oi(n,a)<s&&oi(a,i)<s){for(var o=function(t){for(var e=[0,0,0],i=0;i<t.length;i++)e[0]+=t[i][0],e[1]+=t[i][1],e[2]+=t[i][2];return e[0]/=t.length,e[1]/=t.length,e[2]/=t.length,e}([r,i,n,a]),h=[],l=0;l<t.width*t.height;l++){var d=oi(o,[t.data[4*l],t.data[4*l+1],t.data[4*l+2]]);h[l]=d<s?0:255}return h}}(t,this.threshold());return e&&function(t,e){for(var i=0;i<t.width*t.height;i++)t.data[4*i+3]=e[i]}(t,e=function(t,e,i){for(var r=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],a=Math.round(Math.sqrt(r.length)),n=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var l=o*e+h,d=0,c=0;c<a;c++)for(var g=0;g<a;g++){var u=o+c-n,f=h+g-n;if(u>=0&&u<i&&f>=0&&f<e){var p=r[c*a+g];d+=t[u*e+f]*p}}s[l]=d}return s}(e=function(t,e,i){for(var r=[1,1,1,1,1,1,1,1,1],a=Math.round(Math.sqrt(r.length)),n=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var l=o*e+h,d=0,c=0;c<a;c++)for(var g=0;g<a;g++){var u=o+c-n,f=h+g-n;if(u>=0&&u<i&&f>=0&&f<e){var p=r[c*a+g];d+=t[u*e+f]*p}}s[l]=d>=1020?255:0}return s}(e=function(t,e,i){for(var r=[1,1,1,1,0,1,1,1,1],a=Math.round(Math.sqrt(r.length)),n=Math.floor(a/2),s=[],o=0;o<i;o++)for(var h=0;h<e;h++){for(var l=o*e+h,d=0,c=0;c<a;c++)for(var g=0;g<a;g++){var u=o+c-n,f=h+g-n;if(u>=0&&u<i&&f>=0&&f<e){var p=r[c*a+g];d+=t[u*e+f]*p}}s[l]=2040===d?255:0}return s}(e,t.width,t.height),t.width,t.height),t.width,t.height)),t},Noise:function(t){var e,i=255*this.noise(),r=t.data,a=r.length,n=i/2;for(e=0;e<a;e+=4)r[e+0]+=n-2*n*Math.random(),r[e+1]+=n-2*n*Math.random(),r[e+2]+=n-2*n*Math.random()},Pixelate:function(t){var e,i,r,a,n,s,o,h,l,d,c,g,u,f,p=Math.ceil(this.pixelSize()),v=t.width,m=t.height,_=Math.ceil(v/p),x=Math.ceil(m/p),b=t.data;if(p<=0)y.error("pixelSize value can not be <= 0");else for(g=0;g<_;g+=1)for(u=0;u<x;u+=1){for(a=0,n=0,s=0,o=0,l=(h=g*p)+p,c=(d=u*p)+p,f=0,e=h;e<l;e+=1)if(!(e>=v))for(i=d;i<c;i+=1)i>=m||(a+=b[0+(r=4*(v*i+e))],n+=b[r+1],s+=b[r+2],o+=b[r+3],f+=1);for(a/=f,n/=f,s/=f,o/=f,e=h;e<l;e+=1)if(!(e>=v))for(i=d;i<c;i+=1)i>=m||(b[0+(r=4*(v*i+e))]=a,b[r+1]=n,b[r+2]=s,b[r+3]=o)}},Posterize:function(t){var e,i=Math.round(254*this.levels())+1,r=t.data,a=r.length,n=255/i;for(e=0;e<a;e+=1)r[e]=Math.floor(r[e]/n)*n},RGB:function(t){var e,i,r=t.data,a=r.length,n=this.red(),s=this.green(),o=this.blue();for(e=0;e<a;e+=4)i=(.34*r[e]+.5*r[e+1]+.16*r[e+2])/255,r[e]=i*n,r[e+1]=i*s,r[e+2]=i*o,r[e+3]=r[e+3]},RGBA:function(t){var e,i,r=t.data,a=r.length,n=this.red(),s=this.green(),o=this.blue(),h=this.alpha();for(e=0;e<a;e+=4)i=1-h,r[e]=n*h+r[e]*i,r[e+1]=s*h+r[e+1]*i,r[e+2]=o*h+r[e+2]*i},Sepia:function(t){var e,i,r,a,n=t.data,s=n.length;for(e=0;e<s;e+=4)i=n[e+0],r=n[e+1],a=n[e+2],n[e+0]=Math.min(255,.393*i+.769*r+.189*a),n[e+1]=Math.min(255,.349*i+.686*r+.168*a),n[e+2]=Math.min(255,.272*i+.534*r+.131*a)},Solarize:function(t){var e=t.data,i=t.width,r=4*i,a=t.height;do{var n=(a-1)*r,s=i;do{var o=n+4*(s-1),h=e[o],l=e[o+1],d=e[o+2];h>127&&(h=255-h),l>127&&(l=255-l),d>127&&(d=255-d),e[o]=h,e[o+1]=l,e[o+2]=d}while(--s)}while(--a)},Threshold:function(t){var e,i=255*this.threshold(),r=t.data,a=r.length;for(e=0;e<a;e+=1)r[e]=r[e]<i?0:255}}});var li=i(234);class di{static floorMapPath="./assets/floor-tiles.png";static testGifPath="./assets/test-gif.gif";static loadPromises=[];static tiles=[];InitAssets(){}}class ci extends hi.Rect{constructor(e,i,r,a,n=!1){const s=new Image;n&&t.logWarning("gif is not implemented"),s.src=a;var o=new Promise((t=>{s.onload=()=>{r.add(this),t(null)}}));di.loadPromises.push(o),super({x:e,y:i,width:gi.gridSquarePx,height:gi.gridSquarePx,fillPatternImage:s,fillPatternOffsetX:0,fillPatternOffsetY:0,name:`${e}${i}`})}static tileTypes=[ci.dirt,ci.flowers,ci.daisies,ci.grass,ci.soil,ci.brick,ci.hexagonTiles,ci.wood,ci.dirtLight];static doTile(t,e,i,r,a,n){let s;return s=new ci(r,a,n,di.floorMapPath),s.fillPatternOffsetX(e),s.fillPatternOffsetY(i),s.fillPatternScale({x:.5,y:.5}),s}static dirt(t,e,i){return ci.doTile(0,0,0,t,e,i)}static flowers(t,e,i){return ci.doTile(1,100,0,t,e,i)}static water(t,e,i){return ci.doTile(2,200,0,t,e,i)}static daisies(t,e,i){return ci.doTile(3,300,0,t,e,i)}static grass(t,e,i){return ci.doTile(4,400,0,t,e,i)}static soil(t,e,i){return ci.doTile(5,500,0,t,e,i)}static brick(t,e,i){return ci.doTile(6,600,0,t,e,i)}static hexagonTiles(t,e,i){return ci.doTile(7,700,0,t,e,i)}static wood(t,e,i){return ci.doTile(8,800,0,t,e,i)}static road(t,e,i){return ci.doTile(9,900,0,t,e,i)}static dirtLight(t,e,i){return ci.doTile(10,0,100,t,e,i)}static DefaulFloorTile(t,e,i){const r=new ci(t,e,i,di.floorMapPath);return r.fillPatternScale({x:.5,y:.5}),r}}class gi{static gridSquarePx=50;static stage;static layers;static mapLayer;static playerLayer;static viewPortHeight;static viewPortWidth;static viewPortScrollX;static viewPortScrollY;static noiseMap;static mapChunks=[];static InitGrid(){return new Promise(((t,e)=>{const i=pi.gameArea.clientHeight,r=pi.gameArea.clientWidth;pi.body.style.width=`${r+400}px`,pi.body.style.height=`${i+400}px`;const a=document.createElement("div");a.style.height=a.style.width=`${gi.gridSquarePx}px`;const n=(0,li.DA)(Date.now());gi.viewPortHeight=window.innerHeight,gi.viewPortWidth=window.innerWidth,gi.noiseMap=(0,s.m0)(r/gi.gridSquarePx,i/gi.gridSquarePx,((t,e)=>Math.floor(Math.abs(n(t,e)*ci.tileTypes.length))),{frequency:.06,octaves:1}),gi.mapLayer=new hi.Layer,gi.playerLayer=new hi.Layer,ci.water(10,20,gi.playerLayer);for(let t=0;t<i;t+=gi.gridSquarePx)for(let e=0;e<r;e+=gi.gridSquarePx){const i=gi.noiseMap[t/gi.gridSquarePx][e/gi.gridSquarePx],r=Math.floor(t/1e3),a=Math.floor(e/1e3);let n=gi.mapChunks[r],s=null;n&&(s=n[a]),s||(s=new hi.Group,gi.mapChunks[r]||(gi.mapChunks[r]=[]),gi.mapChunks[r][a]=s,gi.mapLayer.add(s)),ci.tileTypes[i](t,e,s)}gi.stage=new hi.Stage({container:pi.gameArea.id,width:pi.gameArea.clientWidth,height:pi.gameArea.clientHeight}),gi.stage.add(gi.mapLayer),gi.stage.add(gi.playerLayer),Promise.all(di.loadPromises).then((()=>{console.log("asset helper promises resolved"),t(null)}),(()=>e()))}))}static DrawMap(){if(!gi.noiseMap)return;gi.GetViewPortDimensions();const t=new hi.Layer;let e=Math.floor(gi.viewPortScrollX/this.gridSquarePx),i=Math.floor(gi.viewPortScrollY/this.gridSquarePx),r=e+gi.viewPortWidth/this.gridSquarePx,a=i+gi.viewPortHeight/this.gridSquarePx;for(let n=e;n<r;n++)for(let e=i;e<a;e++){const i=gi.noiseMap[n][e];ci.tileTypes[i](n*gi.gridSquarePx,e*gi.gridSquarePx,t)}Promise.all(di.loadPromises).then((()=>{gi.stage=new hi.Stage({container:pi.gameArea.id,width:pi.gameArea.clientWidth,height:pi.gameArea.clientHeight})}))}static GetViewPortDimensions(){gi.viewPortHeight=window.innerHeight,gi.viewPortWidth=window.innerWidth,gi.viewPortScrollX=window.scrollX,gi.viewPortScrollY=window.scrollY}}class ui{static tick;static isTicking;static time;static level}class fi{constructor(){window.addEventListener("keydown",(t=>this.keyDown(t))),window.addEventListener("keyup",(t=>this.keyUp(t))),this.pressingActions={}}pressingActions={};keyConfig={up:[87,38],down:[83,40],left:[65,37],right:[68,39]};keyDown(t){for(var e in this.keyConfig){const i=this.keyConfig[e];i&&i.some((e=>e===t.keyCode))&&(this.pressingActions[e]=!0)}}keyUp(t){for(var e in this.keyConfig){const i=this.keyConfig[e];i&&i.some((e=>e===t.keyCode))&&(this.pressingActions[e]=!1)}}isActionPressed(t){return this.pressingActions[t]}}class pi{static curentTickElement=document.getElementById("current-tick");static fpsElement=document.getElementById("fps");static pauseButton=document.getElementById("toggle-pause-button");static gameArea=document.getElementById("game-area");static gameUi=document.getElementById("game-ui");static loader=document.getElementById("loader");static body=document.querySelector("body");static game;static _isLoading=!0;static playerController;static set isLoading(t){pi._isLoading=t,!0===t&&pi.loader.classList.remove("d-none"),!1===t&&pi.loader.classList.add("d-none")}static get isLoading(){return pi._isLoading}constructor(){pi.Init()}static Init(){pi.updateViewPortSize(),window.requestAnimationFrame((()=>{pi.isLoading=!0,pi.gameArea.classList.add("opacity-0"),n.currentLevel=n.levels[0],t.logInfo("building game state"),ui.tick=0,ui.isTicking=!0,ui.time=null,ui.level=null,pi.playerController=new fi,pi.pauseButton&&pi.pauseButton.addEventListener("click",pi.toggleGamePause),window.requestAnimationFrame((()=>{gi.InitGrid().then((()=>{console.log("init grid done"),pi.isLoading=!1,pi.gameArea.classList.remove("d-none"),console.log(gi.mapChunks)}))}))}))}static startGame(){window.requestAnimationFrame(this.tick)}static tick(){if(pi.isLoading)return void window.requestAnimationFrame(pi.tick);const t=1e3/(Date.now()-ui.time);ui.time=Date.now(),ui.tick++,pi.movePlayer(),pi.curentTickElement.innerHTML=`${ui.tick}`,ui.isTicking&&(ui.tick%100==0&&(pi.runQuestsChecks(),pi.runSpecialPawnChecks(),gi.mapChunks[0][0].children.find((t=>"00"==t.name())).absolutePosition({x:10,y:10})),ui.tick%10==0&&(pi.fpsElement.innerHTML=`${Math.round(t)}`),window.requestAnimationFrame(pi.tick))}static updateViewPortSize(){gi.viewPortHeight=window.innerHeight,gi.viewPortWidth=window.innerWidth,pi.gameUi.style.width=`${gi.viewPortWidth}px`,pi.gameUi.style.height=`${gi.viewPortHeight}px`}static movePlayer(){let t=null;pi.playerController.isActionPressed("up")&&(t=gi.playerLayer.absolutePosition(),t.y>0&&(t.y-=10),gi.playerLayer.absolutePosition(t)),pi.playerController.isActionPressed("down")&&(t=gi.playerLayer.absolutePosition(),t.y<pi.gameArea.clientHeight&&(t.y+=10),gi.playerLayer.absolutePosition(t)),pi.playerController.isActionPressed("left")&&(t=gi.playerLayer.absolutePosition(),t.x>0&&(t.x-=10),gi.playerLayer.absolutePosition(t)),pi.playerController.isActionPressed("right")&&(t=gi.playerLayer.absolutePosition(),t.x<pi.gameArea.clientWidth&&(t.x+=10),gi.playerLayer.absolutePosition(t)),t&&window.scrollTo(t.x-gi.viewPortWidth/2,t.y-gi.viewPortHeight/2)}static runQuestsChecks(){if(this.gameExists()){const t=n.player;t?t.checkForPlayerPassedQuests():console.error("unable to find human player attached to game")}}static runSpecialPawnChecks(){if(this.gameExists()&&this.currentLevelIsLoaded()){const t=n.currentLevel.specialPawns,e=t[a.getRandomInt(0,t.length)];if(e){if(e.chanceToAppearPerCheck>a.getRandomInt(0,100)&&e.questsToGive?.length>0)for(const t of e.questsToGive)if(e.giveQuestToPlayer(t,n.player))break}else console.error("unable to find pawn")}else console.error("unable to find game")}static gameExists(){return!!n||(console.error("unable to find game"),!1)}static currentLevelIsLoaded(){return!!n.currentLevel||(console.error("current level is unloaded"),!1)}static toggleGamePause(){ui.isTicking=!ui.isTicking,ui.isTicking&&window.requestAnimationFrame(pi.tick)}}class vi{constructor(t,e=null,i=null){let r;this.id=t,e&&i||(r=class{static firstNames=["Ana","Heath","Mariam","Jaylene","Nathaniel","Theresa","Karissa","Tiara","Amiah","Carolyn","Kenzie","Stephen","Skyler","Jesus","Jaylen","Kasey","Uriel","Aryana","Hillary","Keith","Avery","Jayla","Gwendolyn","Alberto","Josue"];static surnames=["Novak","Leblank","Davies","Monroe","Farley","McDowell","Meza","Werner","Maxwell","Wilson","Nguyen","Hoffman","Knapp","Dennis","Burch","Travis","Tucker","Erickson","Kidd","Walton","Flowers","Santiago","Hardin","Hahn","Vaughan"];static generate(){return{firstName:this.firstNames[a.getRandomInt(0,this.firstNames.length)],surname:this.surnames[a.getRandomInt(0,this.surnames.length)]}}}.generate()),this.forename=e??r.firstName,this.surname=i??r.surname,this.healthPoints=100}id;forename;surname;stats;healthPoints;credits;equipment;creditsPerSecond;buffs;relationships;chanceToAppearPerCheck}class mi{maxWeight;items}n.player=new class extends vi{constructor(t,e){super(-1,t,e),this.inventory=new mi}activeQuests=[];completedQuests=[];failedQuests=[];inventory;checkForPlayerPassedQuests(){for(const e of this.activeQuests)e.questPassed?(t.logInfo(`Player has passed quest: ${e.name}`),this.activeQuests.splice(this.activeQuests.indexOf(e),1),this.completedQuests.push(e)):this.checkCurrentQuestStageComplete(e)&&e.nextStageOrPassQuest()}checkCurrentQuestStageComplete(t){let e=!0;if(t.stages.indexOf[t.currentStage]>-1){const i=t.stages[t.currentStage];i.completionCondition.checkPlayerHasBuffs&&(e=e&&i.completionCondition.requiredBuffNames.some((t=>this.hasBuff(t))))}else console.error(`checkCurrentStageComplete failed, stage ${t.currentStage} does not exist`);return e}hasBuff(t){return this.buffs.indexOf[t]>-1}}("Test","Player");const _i=new class extends vi{isQuestGiver;questsToGive;giveQuestToPlayer(e,i){return t.logInfo(`${this.forename} ${this.surname} is giving a quest to player`),e?(i.activeQuests.push(e),this.questsToGive.splice(this.questsToGive.indexOf(e),1),!0):(console.error("Quest to give not found"),!1)}}(1001,"Abigail");_i.credits=0,_i.healthPoints=60,_i.isQuestGiver=!0,_i.chanceToAppearPerCheck=101;const yi=new class{name;currentStage;stages;questGiverId;questFailed;questPassed;nextStageOrPassQuest(){const t=this.currentStage+1;return this.stages.indexOf[t]>-1?(this.currentStage=t,this.currentStage):(this.currentStage=-1,this.questPassed=!0,-1)}};yi.name="Test Quest",yi.questGiverId=1001,yi.stages=[{startCondition:{checkPlayerHasBuffs:!0,requiredBuffNames:["Test Start Quest Buff Trigger"]},description:"This is a test quest",failureText:"Test failure text",completionReward:{playerStatBuffs:[{buffValue:150,statName:"Test Start Quest Buff Trigger"},{buffValue:150,statName:"Test End Quest Buff Reward"}]},completionCondition:{checkPlayerHasBuffs:!0,requiredBuffNames:["Test End Quest Buff Trigger"]},completionText:"Test completion text"}],_i.questsToGive=[yi];const xi={name:"The hotdog stand",pawns:(()=>{const t=[];for(let e=0;e<50;e++){const i=new vi(e);i.credits=100,i.creditsPerSecond=.2,t.push(i)}return t})(),specialPawns:[_i]};n.levels=[xi],pi.Init(),pi.startGame()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,